---
name: Create and Apply a Skip Label
description: >
    Creates a label named skip_<workflow_file_name> and applies it to the current PR
    if it doesn't exist. Adds a comment to the PR explaining the label.
    This action requeries you to provide a ``GH_TOKEN with `write` permission on `pull-requests`.

inputs:
    comment-message:
        description: The custom message to include in the PR comment.
        required: false
        default: because the tests passed successfully and Renovate is not expected to modify the test logic. This is to save resources. If you are making
            more significant changes, you should remove the label. üîÑ

runs:
    using: composite
    steps:
        - name: Extract workflow file name
          id: extract_workflow_name
          shell: bash
          run: |
              set -euo pipefail

              workflow_file_name=$(echo "${{ github.workflow_ref }}" | sed 's/@.*//')
              workflow_file_name=$(basename "$workflow_file_name" | sed 's/\(.*\)\(\.yaml\|\.yml\)$/\1/')
              echo "workflow_file_name=$workflow_file_name" | tee -a "$GITHUB_ENV"
              echo "skip_label_name=skip_${workflow_file_name}" | tee -a "$GITHUB_ENV"

        - name: Check if label exists
          id: check_label
          shell: bash
          run: |
              set -euo pipefail

              if gh api repos/${{ github.repository }}/labels/${{ env.skip_label_name }} --jq '.name' > /dev/null 2>&1; then
                echo "Label ${{ env.skip_label_name }} already exists."
                echo "label_exists=true" | tee -a "$GITHUB_ENV"
              else
                echo "Label ${{ env.skip_label_name }} does not exist."
                echo "label_exists=false" | tee -a "$GITHUB_ENV"
              fi

        - name: Create label if it doesn't exist
          if: env.label_exists == 'false'
          shell: bash
          run: |
              set -euo pipefail

              gh api -X POST repos/${{ github.repository }}/labels -f name="${{ env.skip_label_name }}" -f color="1D76DB"

        - name: Apply label to the current PR
          shell: bash
          id: label
          run: |
              set -euo pipefail

              pr_number=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")

              if gh pr view "$pr_number" --json labels | jq -e --arg LABEL "${{ env.skip_label_name }}" '.labels[] | select(.name == $LABEL)' > /dev/null; then
                echo "Label already present. Skipping."
                echo "applied=false" | tee -a "$GITHUB_OUTPUT"
              else
                echo "Applying label '${{ env.skip_label_name }}' to PR #$pr_number."
                gh issue edit "$pr_number" --add-label "${{ env.skip_label_name }}"
                echo "applied=true" | tee -a "$GITHUB_OUTPUT"
              fi

        - name: Add comment to the PR
          shell: bash
          if: steps.label.outputs.applied == 'true'
          run: |
              set -euo pipefail

              pr_number=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
              comment="üè∑Ô∏è The label [${{ env.skip_label_name }}](https://github.com/${{ github.repository }}/labels/${{ env.skip_label_name }}) \
                has been applied ${{ inputs.comment-message }}"
              gh api -X POST repos/${{ github.repository }}/issues/$pr_number/comments -f body="$comment"
