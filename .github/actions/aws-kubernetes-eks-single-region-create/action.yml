---
name: Deploy AWS Kubernetes EKS Single Region Cluster

description: |
    This GitHub Action automates the deployment of the aws/kubernetes/eks-single-region(-irsa) reference architecture cluster using Terraform.
    The kube context will be set on the created cluster.

inputs:
    cluster-name:
        description: Name of the EKS cluster to deploy
        required: true
    aws-region:
        description: AWS region where the EKS cluster will be deployed
        required: true
    kubernetes-version:
        description: Version of Kubernetes to install
        required: false
        # renovate: datasource=endoflife-date depName=amazon-eks versioning=loose
        default: '1.32'
    single-nat-gateway:
        description: Whether to use a single NAT gateway or not. Default is true for our tests to save on IPs.
        default: 'true'
    tags:
        description: Tags to apply to the cluster and related resources, in JSON format
        default: '{}'
    s3-backend-bucket:
        description: Name of the S3 bucket to store Terraform state
        required: true
    s3-bucket-region:
        description: Region of the bucket containing the resources states, if not set, will fallback on aws-region
    s3-bucket-key-prefix:
        description: Key prefix of the bucket containing the resources states. It must contain a / at the end e.g 'my-prefix/'.
        default: ''
    tf-modules-revision:
        description: Git revision of the tf modules to use
        default: main
        required: true
    tf-modules-path:
        description: Path where the tf eks modules will be cloned
        default: ./.action-tf-modules/aws-kubernetes-eks-single-region-create/
        required: true
    login:
        description: Authenticate the current kube context on the created cluster
        default: 'true'
        required: true
    ref-arch:
        description: Reference architecture to deploy
        default: eks-single-region-irsa
        required: false

outputs:
    terraform-state-url:
        description: URL of the Terraform state file in the S3 bucket
        value: ${{ steps.set-terraform-variables.outputs.terraform-state-url }}

runs:
    using: composite
    steps:
        - name: Checkout Repository
          uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
          with:
              repository: camunda/camunda-deployment-references
              ref: ${{ inputs.tf-modules-revision }}
              path: ${{ inputs.tf-modules-path }}
              fetch-depth: 0

        - name: Install asdf tools with cache for the project
          uses: camunda/infraex-common-config/./.github/actions/asdf-install-tooling@d0b1d5e182380299c16ea63709b6b6949736b36f # 1.4.4

        - name: Set Terraform variables
          id: set-terraform-variables
          shell: bash
          run: |
              set -euo pipefail
              export TFSTATE_BUCKET="${{ inputs.s3-backend-bucket }}"
              export TFSTATE_KEY="${{ inputs.s3-bucket-key-prefix }}tfstate-${{ inputs.cluster-name }}/${{ inputs.cluster-name }}.tfstate"

              if [ -z "${{ inputs.s3-bucket-region }}" ]; then
                export TFSTATE_REGION="$AWS_REGION"
              else
                export TFSTATE_REGION="${{ inputs.s3-bucket-region }}"
              fi

              echo "TFSTATE_BUCKET=${TFSTATE_BUCKET}" >> "$GITHUB_OUTPUT"
              echo "TFSTATE_REGION=${TFSTATE_REGION}" >> "$GITHUB_OUTPUT"
              echo "TFSTATE_KEY=${TFSTATE_KEY}" >> "$GITHUB_OUTPUT"

              terraform_state_url="s3://${TFSTATE_BUCKET}/${TFSTATE_KEY}"
              echo "terraform-state-url=${terraform_state_url}" >> "$GITHUB_OUTPUT"

        - name: Terraform Init
          id: init
          working-directory: ${{ inputs.tf-modules-path }}/aws/kubernetes/${{ inputs.ref-arch }}/
          shell: bash
          run: |
              set -euo pipefail

              terraform version

              terraform init \
                -backend-config="bucket=${{ steps.set-terraform-variables.outputs.TFSTATE_BUCKET }}" \
                -backend-config="key=${{ steps.set-terraform-variables.outputs.TFSTATE_KEY }}" \
                -backend-config="region=${{ steps.set-terraform-variables.outputs.TFSTATE_REGION }}"

              terraform validate -no-color

        - name: Terraform Plan
          id: plan
          working-directory: ${{ inputs.tf-modules-path }}/aws/kubernetes/${{ inputs.ref-arch }}/
          shell: bash
          run: |
              set -euo pipefail
              echo "Adapting the files with input values"
              pwd
              ls

              # We use sed instead of -var because the module presented to the user
              # uses locals for simplicity. Locals cannot be overwritten with the CLI.
              sed -i -e 's/\(eks_cluster_name\s*=\s*"\)[^"]*\("\)/\1${{ inputs.cluster-name }}\2/' \
                     -e 's/\(eks_cluster_region\s*=\s*"\)[^"]*\("\)/\1${{ inputs.aws-region }}\2/' \
                     -e 's/\(kubernetes_version\s*=\s*"\)[^"]*\("\)/\1${{ inputs.kubernetes-version }}\2/' \
                     -e 's/\(single_nat_gateway\s*=\s*"\)[^"]*\("\)/\1${{ inputs.single-nat-gateway }}\2/' \
                     cluster.tf

              echo "Displaying templated cluster.tf file:"
              cat cluster.tf

              sed -i -e 's/\(aurora_cluster_name\s*=\s*"\)[^"]*\("\)/\1${{ inputs.cluster-name }}-pg\2/' \
                     db.tf

              echo "Displaying templated db.tf file:"
              cat db.tf

              sed -i -e 's/\(opensearch_domain_name\s*=\s*"\)[^"]*\("\)/\1${{ inputs.cluster-name }}-os\2/' \
                     opensearch.tf

              echo "Displaying templated opensearch.tf file:"
              cat opensearch.tf

              raw_tags='${{ inputs.tags }}'
              escaped_tags=$(echo "$raw_tags" | jq -r '
                to_entries
                | map("\"" + .key + "\"=\"" + (
                    .value
                    | gsub("[^a-zA-Z0-9_.:/=+\\-@ ]"; "-")               # Replace invalid characters
                    | sub("[-_.:/=+@ ]+$"; "")                           # Remove trailing special characters
                    ) + "\"")
                | join(", ")
                ' | sed 's/.*/{&}/')

              terraform plan -no-color -var="default_tags=$escaped_tags" -out tf.plan

        - name: Terraform Apply
          id: apply
          working-directory: ${{ inputs.tf-modules-path }}/aws/kubernetes/${{ inputs.ref-arch }}/
          shell: bash
          run: |
              set -euo pipefail
              terraform apply -no-color tf.plan

        - name: Login and generate kubeconfig
          if: inputs.login == 'true'
          shell: bash
          run: |
              set -euo pipefail
              aws eks update-kubeconfig --region ${{ inputs.aws-region }} --name ${{ inputs.cluster-name }} --alias ${{ inputs.cluster-name }}

              kubectl config current-context
              kubectl get nodes
