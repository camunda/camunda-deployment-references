---
name: Deploy AWS Compute EC2 Single Region

description: |
    This GitHub Action automates the deployment of the aws/compute/ec2-single-region reference architecture using Terraform.

inputs:
    cluster-name:
        description: Name of the EC2 cluster to deploy
        required: true
    aws-region:
        description: AWS region where the EC2 cluster will be deployed
        required: true
    tags:
        description: Tags to apply to the cluster and related resources, in JSON format
        default: '{}'
    s3-backend-bucket:
        description: Name of the S3 bucket to store Terraform state
        required: true
    s3-bucket-region:
        description: Region of the bucket containing the resources states, if not set, will fallback on aws-region
    s3-bucket-key-prefix:
        description: Key prefix of the bucket containing the resources states. It must contain a / at the end e.g 'my-prefix/'.
        default: ''
    tf-modules-revision:
        description: Git revision of the tf modules to use
        default: main
        required: true
    tf-modules-path:
        description: Path where the tf ec2 arch will be cloned
        default: ./.action-tf-modules/aws-compute-ec2-single-region-create/
        required: true
    tf-modules-name:
        description: Name of the tf modules to use, the folder to refer to - cluster / vpn
        default: cluster
        required: true
    ref-arch:
        description: Reference architecture to deploy
        default: ec2-single-region
        required: false
outputs:
    terraform-state-url:
        description: URL of the Terraform state file in the S3 bucket
        value: ${{ steps.set-terraform-variables.outputs.terraform-state-url }}

runs:
    using: composite
    steps:
        - name: Checkout Repository
          uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
          with:
              repository: camunda/camunda-deployment-references
              ref: ${{ inputs.tf-modules-revision }}
              path: ${{ inputs.tf-modules-path }}
              fetch-depth: 0

        - name: Install asdf tools with cache for the project
          uses: camunda/infraex-common-config/./.github/actions/asdf-install-tooling@eb9d51b4dc89deeda7fc160166f378725ee0f06a # 1.5.3

        - name: Set Terraform variables
          id: set-terraform-variables
          shell: bash
          run: |
              set -euo pipefail
              export TFSTATE_BUCKET="${{ inputs.s3-backend-bucket }}"
              export TFSTATE_BASE_KEY="${{ inputs.s3-bucket-key-prefix }}tfstate-${{ inputs.cluster-name }}/"

              if [ -z "${{ inputs.s3-bucket-region }}" ]; then
                export TFSTATE_REGION="$AWS_REGION"
              else
                export TFSTATE_REGION="${{ inputs.s3-bucket-region }}"
              fi

              echo "TFSTATE_BUCKET=${TFSTATE_BUCKET}" >> "$GITHUB_OUTPUT"
              echo "TFSTATE_REGION=${TFSTATE_REGION}" >> "$GITHUB_OUTPUT"
              echo "TFSTATE_BASE_KEY=${TFSTATE_BASE_KEY}" >> "$GITHUB_OUTPUT"

        - name: Copy CI fixtures
          shell: bash
          working-directory: ${{ inputs.tf-modules-path }}/aws/compute/${{ inputs.ref-arch }}/terraform/${{ inputs.tf-modules-name }}
          run: |
              set -euo pipefail
              cp -r ./test/fixtures/ci/fixture_* .

        - name: Terraform Init
          id: init
          working-directory: ${{ inputs.tf-modules-path }}/aws/compute/${{ inputs.ref-arch }}/terraform/${{ inputs.tf-modules-name }}
          shell: bash
          run: |
              set -euo pipefail

              terraform version

              terraform init \
                -backend-config="bucket=${{ steps.set-terraform-variables.outputs.TFSTATE_BUCKET }}" \
                -backend-config="key=${{ steps.set-terraform-variables.outputs.TFSTATE_BASE_KEY }}${{ inputs.tf-modules-name }}.tfstate" \
                -backend-config="region=${{ steps.set-terraform-variables.outputs.TFSTATE_REGION }}"

              terraform validate -no-color

        - name: Sanitize Tags
          id: sanitize-tags
          uses: ./.github/actions/internal-sanitize-tags
          with:
              raw-tags: ${{ inputs.tags }}

        - name: Generate tfvars file
          id: generate-tfvars
          shell: bash
          working-directory: ${{ inputs.tf-modules-path }}/aws/compute/${{ inputs.ref-arch }}/terraform/${{ inputs.tf-modules-name }}
          run: |
              set -euo pipefail

              # cut name as some resources have a character limit that we may run into
              # e.g. target groups have a max length of 32 characters
              # with 15 characters we're adding in Terraform
              # therefore cut to 17 characters to be on the safe side
              PREFIX=$(echo "${{ inputs.cluster-name }}" | cut -c1-17)

              cat > terraform.tfvars <<EOF
              default_tags = ${{ steps.sanitize-tags.outputs.sanitized_tags }}
              prefix       = "${PREFIX}"
              EOF

        - name: Terraform Plan
          id: plan
          working-directory: ${{ inputs.tf-modules-path }}/aws/compute/${{ inputs.ref-arch }}/terraform/${{ inputs.tf-modules-name }}
          shell: bash
          run: |
              set -euo pipefail
              export AWS_REGION="${{ inputs.aws-region }}"

              terraform plan -no-color \
                -var-file=terraform.tfvars \
                -out tf.plan

        - name: Terraform Apply
          id: apply
          working-directory: ${{ inputs.tf-modules-path }}/aws/compute/${{ inputs.ref-arch }}/terraform/${{ inputs.tf-modules-name }}
          shell: bash
          run: |
              set -euo pipefail
              terraform apply -no-color tf.plan

        - name: Terraform Drift Detection
          uses: ./.github/actions/internal-terraform-drift-detect
          id: drift-detect
          with:
              working-directory: ${{ inputs.tf-modules-path }}/aws/compute/${{ inputs.ref-arch }}/terraform/${{ inputs.tf-modules-name }}
              plan-extra-args: |
                  -var-file=terraform.tfvars
