---
name: Tests - Integration - Azure Kubernetes AKS Single Region

permissions:
    id-token: write
    contents: read

on:
    schedule:
        - cron: 0 3 * * 3 # Runs at 3 AM on Wednesdays
    pull_request:
        paths:
            - .github/workflows/azure_kubernetes_aks_single_region_tests.yml
            - .tool-versions
            - generic/kubernetes/single-region/**
            - azure/kubernetes/aks-single-region/**
            - .github/actions/azure-kubernetes-aks-single-region-create/**

    workflow_dispatch:
        inputs:
            delete_clusters:
                description: Whether to delete the clusters.
                type: boolean
                default: true
            enable_tests:
                description: Whether to enable the tests.
                type: boolean
                default: true

    # TEMPORARY: run on every push for testing the workflow
    push:
        branches:
            - add-azure-tests

# limit to a single execution per actor of this workflow
concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    # in case of renovate we don't cancel the previous run, so it can finish it
    # otherwise weekly renovate PRs with tf docs updates result in broken clusters
    cancel-in-progress: ${{ !contains('renovate[bot]', github.actor) }}

env:
    IS_SCHEDULE: ${{ contains(github.ref, 'refs/heads/schedules/') || github.event_name == 'schedule' && 'true' || 'false' }}
    IS_RENOVATE_PR: ${{ github.event_name == 'pull_request' && github.event.pull_request.user.login == 'renovate[bot]' }}

    # terraform statefile is to be stored on S3 bucket to ensure compatibility with some existing scripts
    AWS_PROFILE: infraex
    AWS_REGION: eu-west-2
    S3_BACKEND_BUCKET: tests-ra-aws-rosa-hcp-tf-state-eu-central-1
    S3_BUCKET_REGION: eu-central-1

    CLEANUP_CLUSTERS: ${{ github.event.inputs.delete_clusters || 'true' }}

    # TEST VARIABLES

    # Docker Hub auth to avoid image pull rate limit.
    # Vars with "TEST_" prefix are used in the test runner tool (Task).
    TESTS_ENABLED: ${{ github.event.inputs.enable_tests || 'true' }}
    # TODO: [release-duty] before the release, update repo ref!
    # renovate: datasource=github-tags depName=camunda/camunda-platform-helm
    TESTS_CAMUNDA_HELM_CHART_REPO_REF: main   # git reference used to clone the camunda/camunda-platform-helm repository to perform the tests
    TESTS_CAMUNDA_HELM_CHART_REPO_PATH: ./.camunda_helm_repo   # where to clone it

    # Optional components that are not enabled by default in the doc
    WEBMODELER_ENABLED: 'true'
    CONSOLE_ENABLED: 'true'

    # hardcoded envvars temporarily
    RESOURCE_GROUP_NAME: 'camunda-rg'
    CLUSTER_NAME: 'camunda-aks'

jobs:
    triage:
        runs-on: ubuntu-latest
        outputs:
            should_skip: ${{ steps.skip_check.outputs.should_skip }}
        steps:
            - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
            - name: Check labels
              id: skip_check
              uses: ./.github/actions/internal-triage-skip

    prepare-clusters:
        name: Prepare clusters
        needs:
            - triage
        runs-on: ubuntu-latest
        env:
            TF_MODULES_PATH: ./.action-tf-modules/azure-kubernetes-aks-single-region-create/
        steps:
            - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
              with:
                  ref: ${{ github.ref }}
                  fetch-depth: 0

            - name: Install asdf tools with cache
              uses: camunda/infraex-common-config/./.github/actions/asdf-install-tooling@6dc218bf7ee3812a4b6b13c305bce60d5d1d46e5 # 1.3.1

            - name: Import Secrets
              id: secrets
              uses: hashicorp/vault-action@7709c609789c5e27b757a85817483caadbb5939a # v3
              with:
                  url: ${{ secrets.VAULT_ADDR }}
                  method: approle
                  roleId: ${{ secrets.VAULT_ROLE_ID }}
                  secretId: ${{ secrets.VAULT_SECRET_ID }}
                  exportEnv: false
                  secrets: |
                      secret/data/products/infrastructure-experience/ci/common AZURE_CLIENT_ID;
                      secret/data/products/infrastructure-experience/ci/common AZURE_TENANT_ID;
                      secret/data/products/infrastructure-experience/ci/common AZURE_SUBSCRIPTION_ID;

            - name: Configure AWS CLI
              uses: ./.github/actions/aws-configure-cli
              with:
                  vault-addr: ${{ secrets.VAULT_ADDR }}
                  vault-role-id: ${{ secrets.VAULT_ROLE_ID }}
                  vault-secret-id: ${{ secrets.VAULT_SECRET_ID }}
                  aws-profile: ${{ env.AWS_PROFILE }}
                  aws-region: ${{ env.AWS_REGION }}

            - name: Azure Login with OIDC
              uses: azure/login@v1.6.1
              with:
                  client-id: ${{ steps.secrets.outputs.AZURE_CLIENT_ID }}
                  tenant-id: ${{ steps.secrets.outputs.AZURE_TENANT_ID }}
                  subscription-id: ${{ steps.secrets.outputs.AZURE_SUBSCRIPTION_ID }}

            - name: Set current Camunda version
              id: camunda-version
              run: |
                  set -euo pipefail
                  CAMUNDA_VERSION=$(cat .camunda-version)
                  echo "CAMUNDA_VERSION=$CAMUNDA_VERSION" | tee -a "$GITHUB_OUTPUT"

            - name: Generate random cluster_name
              id: generate_cluster_name
              run: |
                  set -euo pipefail
                  PR_NUMBER=0
                  if [[ "${{ github.event_name }}" == "pull_request" ]]; then
                      PR_NUMBER=${{ github.event.pull_request.number}}
                  fi

                  # limiting factor are OpenSearch domains of maximum 28 characters
                  # shellcheck disable=SC2034
                  # echo "CLUSTER_NAME=aks-sr-$PR_NUMBER-$(head /dev/urandom | tr -dc 'a-z0-9' | head -c 5)" | tee -a "$GITHUB_ENV"
                  echo "CLUSTER_NAME=camunda-aks" | tee -a "$GITHUB_ENV"

            - name: Export S3_BACKEND_BUCKET
              id: s3_prefix
              run: |
                  set -euo pipefail
                  echo "S3_BACKEND_BUCKET_PREFIX=azure/kubernetes/azure-kubernetes-aks-single-region/" | tee -a "$GITHUB_OUTPUT"

            - name: Create K8S cluster and login
              uses: ./.github/actions/azure-kubernetes-aks-single-region-create
              id: create_cluster
              # Do not interrupt tests; otherwise, the Terraform state may become inconsistent.
              if: always() && success()
              with:
                  cluster-name: ${{ env.CLUSTER_NAME }}
                  # aws-region: ${{ env.AWS_REGION }}
                  s3-backend-bucket: ${{ env.S3_BACKEND_BUCKET }}
                  s3-bucket-region: ${{ env.S3_BUCKET_REGION }}
                  s3-bucket-key-prefix: ${{ steps.s3_prefix.outputs.S3_BACKEND_BUCKET_PREFIX }}${{ steps.camunda-version.outputs.CAMUNDA_VERSION }}/
                  tf-modules-revision: ${{ github.ref }}
                  tf-modules-path: ${{ env.TF_MODULES_PATH }}
                  ref-arch: aks-single-region

    integration-tests:
        name: Run integration tests - ${{ matrix.scenario }} - ${{ matrix.declination }}
        runs-on: ubuntu-latest
        concurrency:
            # instead of running sequentially in a matrix, we use concurrency to run the different scenarios in parallel
            group: ${{ github.workflow }}-${{ github.ref }}-${{ matrix.scenario }}
            cancel-in-progress: false
        needs:
            - prepare-clusters
        env:
            TEST_NAMESPACE: camunda   # This namespace is hard-coded in the documentation
            # https://github.com/camunda/camunda-platform-helm/blob/test/integration/scenarios/chart-full-setup/Taskfile.yaml#L12C15-L12C32
            TEST_CLUSTER_TYPE: kubernetes
            MAIL_OVERWRITE: admin@camunda.ie
        steps:
            - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

            - name: Install asdf tools with cache for the project
              uses: camunda/infraex-common-config/./.github/actions/asdf-install-tooling@6dc218bf7ee3812a4b6b13c305bce60d5d1d46e5 # 1.3.1

            - name: Import Secrets
              id: secrets
              uses: hashicorp/vault-action@7709c609789c5e27b757a85817483caadbb5939a # v3
              with:
                  url: ${{ secrets.VAULT_ADDR }}
                  method: approle
                  roleId: ${{ secrets.VAULT_ROLE_ID }}
                  secretId: ${{ secrets.VAULT_SECRET_ID }}
                  exportEnv: false
                  secrets: |
                      secret/data/products/infrastructure-experience/ci/common DOCKERHUB_USER;
                      secret/data/products/infrastructure-experience/ci/common DOCKERHUB_PASSWORD;
                      secret/data/products/infrastructure-experience/ci/common CI_CAMUNDA_USER_TEST_CLIENT_ID;
                      secret/data/products/infrastructure-experience/ci/common CI_CAMUNDA_USER_TEST_CLIENT_SECRET;
                      secret/data/products/infrastructure-experience/ci/common CI_ENCRYPTION_KEY;
                      secret/data/products/infrastructure-experience/ci/common AZURE_CLIENT_ID;
                      secret/data/products/infrastructure-experience/ci/common AZURE_TENANT_ID;
                      secret/data/products/infrastructure-experience/ci/common AZURE_SUBSCRIPTION_ID;

            - name: Configure AWS CLI
              uses: ./.github/actions/aws-configure-cli
              with:
                  vault-addr: ${{ secrets.VAULT_ADDR }}
                  vault-role-id: ${{ secrets.VAULT_ROLE_ID }}
                  vault-secret-id: ${{ secrets.VAULT_SECRET_ID }}
                  aws-profile: ${{ env.AWS_PROFILE }}
                  aws-region: ${{ env.AWS_REGION }}

            - name: Azure Login with OIDC
              uses: azure/login@v1.6.1
              with:
                  client-id: ${{ steps.secrets.outputs.AZURE_CLIENT_ID }}
                  tenant-id: ${{ steps.secrets.outputs.AZURE_TENANT_ID }}
                  subscription-id: ${{ steps.secrets.outputs.AZURE_SUBSCRIPTION_ID }}

            - name: 🔐 Login into the cluster
              timeout-minutes: 10
              run: |
                    set -euo pipefail
                    az aks get-credentials --resource-group "${{ env.RESOURCE_GROUP_NAME }}" --name "${{ env.CLUSTER_NAME }}" --overwrite-existing

                    kubectl config current-context
                    kubectl get nodes    

            - name: 🏗️ Ingress Setup prerequisites
              if: ${{ matrix.declination == 'domain' }}
              run: |
                  set -euo pipefail

                  export REGION=${{ env.AWS_REGION }}

                  source generic/kubernetes/single-region/procedure/export-ingress-setup-vars.sh

                  # Overwriting the mail
                  export MAIL=${{ env.MAIL_OVERWRITE }}

                  ./azure/kubernetes/aks-single-region/procedure/install-ingress-nginx.sh

                  export EXTERNAL_DNS_OWNER_ID="external-dns-${{ env.CLUSTER_NAME }}-aks-single-region"
                  ./azure/kubernetes/aks-single-region/procedure/install-external-dns.sh

                  ./generic/kubernetes/single-region/procedure/install-cert-manager-crds.sh

                  ./azure/kubernetes/aks-single-region/procedure/install-cert-manager.sh

                  ./azure/kubernetes/aks-single-region/procedure/install-cert-manager-issuer.sh

            - name: 🏗️ Prepare a fresh namespace for the tests
              run: |
                  set -euo pipefail

                  # Delete the namespace to ensure a fresh start
                  if kubectl get namespace "$TEST_NAMESPACE" &>/dev/null; then
                  kubectl delete namespace "$TEST_NAMESPACE" --wait
                  while kubectl get namespace "$TEST_NAMESPACE" &>/dev/null; do
                      echo "Namespace $TEST_NAMESPACE still being deleted, waiting..."
                      sleep 5
                  done
                  fi

                  # Create the namespace
                  kubectl create namespace "$TEST_NAMESPACE"


    cleanup-clusters:
        name: Cleanup AKS clusters
        if: false
        needs:
            - prepare-clusters
            - triage
            - integration-tests
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
              if: env.CLEANUP_CLUSTERS == 'true'
              with:
                  fetch-depth: 0

            - name: Install asdf tools with cache
              if: env.CLEANUP_CLUSTERS == 'true'
              uses: camunda/infraex-common-config/./.github/actions/asdf-install-tooling@6dc218bf7ee3812a4b6b13c305bce60d5d1d46e5 # 1.3.1

            - name: Import Secrets
              id: secrets
              uses: hashicorp/vault-action@7709c609789c5e27b757a85817483caadbb5939a # v3
              with:
                  url: ${{ secrets.VAULT_ADDR }}
                  method: approle
                  roleId: ${{ secrets.VAULT_ROLE_ID }}
                  secretId: ${{ secrets.VAULT_SECRET_ID }}
                  exportEnv: false
                  secrets: |
                      secret/data/products/infrastructure-experience/ci/common AZURE_CLIENT_ID;
                      secret/data/products/infrastructure-experience/ci/common AZURE_TENANT_ID;
                      secret/data/products/infrastructure-experience/ci/common AZURE_SUBSCRIPTION_ID;

            - name: Configure AWS CLI
              uses: ./.github/actions/aws-configure-cli
              with:
                  vault-addr: ${{ secrets.VAULT_ADDR }}
                  vault-role-id: ${{ secrets.VAULT_ROLE_ID }}
                  vault-secret-id: ${{ secrets.VAULT_SECRET_ID }}
                  aws-profile: ${{ env.AWS_PROFILE }}
                  aws-region: ${{ env.AWS_REGION }}

            - name: Set current Camunda version
              if: env.CLEANUP_CLUSTERS == 'true'
              id: camunda-version
              run: |
                  set -euo pipefail
                  CAMUNDA_VERSION=$(cat .camunda-version)
                  echo "CAMUNDA_VERSION=$CAMUNDA_VERSION" | tee -a "$GITHUB_OUTPUT"

            - name: Export S3_BACKEND_BUCKET based on matrix
              if: env.CLEANUP_CLUSTERS == 'true'
              id: s3_prefix
              run: |
                  set -euo pipefail
                  echo "S3_BACKEND_BUCKET_PREFIX=azure/kubernetes/azure-kubernetes-aks-single-region/" | tee -a "$GITHUB_OUTPUT"

            - name: Delete on-demand AKS Cluster
              uses: ./.github/actions/azure-kubernetes-aks-single-region-cleanup
              if: always() && env.CLEANUP_CLUSTERS == 'true'
              timeout-minutes: 125
              with:
                  tf-bucket: ${{ env.S3_BACKEND_BUCKET }}
                  tf-bucket-region: ${{ env.S3_BUCKET_REGION }}
                  max-age-hours-cluster: 0
                  target: ${{ env.CLUSTER_NAME }}
                  tf-bucket-key-prefix: ${{ steps.s3_prefix.outputs.S3_BACKEND_BUCKET_PREFIX }}${{ steps.camunda-version.outputs.CAMUNDA_VERSION }}/
