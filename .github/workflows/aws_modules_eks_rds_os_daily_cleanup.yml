---
name: Tests - Daily Cleanup - AWS EKS/RDS/OS Modules

on:
    workflow_dispatch:
        inputs:
            max_age_hours:
                description: Maximum age of resources in hours
                required: true
                default: '20'
    pull_request:
        # the paths should be synced with ../labeler.yml
        paths:
            - .github/workflows/aws_modules_eks_rds_os_daily_cleanup.yml
            - .github/actions/aws-eks-cleanup-resources/**

    schedule:
        - cron: 0 1 * * * # At 01:00 everyday.

# limit to a single execution per actor of this workflow
concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    # in case of renovate we don't cancel the previous run, so it can finish it
    # otherwise weekly renovate PRs with tf docs updates result in broken clusters
    cancel-in-progress: ${{ !contains('renovate[bot]', github.actor) }}

env:
    IS_SCHEDULE: ${{ contains(github.ref, 'refs/heads/schedules/') || github.event_name == 'schedule' && 'true' || 'false' }}

    MAX_AGE_HOURS: ${{ github.event.inputs.max_age_hours || '20' }}
    AWS_PROFILE: infex

    # please keep those variables synced with tests.yml
    AWS_REGION: eu-west-2
    S3_BACKEND_BUCKET: tests-eks-tf-state-eu-central-1
    S3_BUCKET_REGION: eu-central-1

jobs:
    triage:
        runs-on: ubuntu-latest
        outputs:
            should_skip: ${{ steps.skip_check.outputs.should_skip }}
        steps:
            - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
            - name: Check labels
              id: skip_check
              uses: ./.github/actions/internal-triage-skip

    cleanup-clusters:
        needs:
            - triage
        if: needs.triage.outputs.should_skip == 'false'
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
              with:
                  ref: ${{ github.head_ref }}
                  fetch-depth: 0

            - name: Install asdf tools with cache
              uses: camunda/infraex-common-config/./.github/actions/asdf-install-tooling@e9a9f33ab193348a82a79bd9250fdf12f708390a # 1.2.19

            - name: Use repo .tool-version as global version
              run: cp .tool-versions ~/.tool-versions

            - name: Import Secrets
              id: secrets
              uses: hashicorp/vault-action@7709c609789c5e27b757a85817483caadbb5939a # v3
              with:
                  url: ${{ secrets.VAULT_ADDR }}
                  method: approle
                  roleId: ${{ secrets.VAULT_ROLE_ID }}
                  secretId: ${{ secrets.VAULT_SECRET_ID }}
                  exportEnv: false
                  secrets: |
                      secret/data/products/infrastructure-experience/ci/common AWS_ACCESS_KEY;
                      secret/data/products/infrastructure-experience/ci/common AWS_SECRET_KEY;

            # Official action does not support profiles
            - name: Add profile credentials to ~/.aws/credentials
              run: |
                  aws configure set aws_access_key_id ${{ steps.secrets.outputs.AWS_ACCESS_KEY }} --profile ${{ env.AWS_PROFILE }}
                  aws configure set aws_secret_access_key ${{ steps.secrets.outputs.AWS_SECRET_KEY }} --profile ${{ env.AWS_PROFILE }}
                  aws configure set region ${{ env.AWS_REGION }} --profile ${{ env.AWS_PROFILE }}

            - name: Set current Camunda version
              id: camunda-version
              run: |
                  CAMUNDA_VERSION=$(cat .camunda-version)
                  echo "CAMUNDA_VERSION=$CAMUNDA_VERSION" | tee -a "$GITHUB_OUTPUT"

            - name: Delete orphaned resources
              id: delete-orphaned-resources
              timeout-minutes: 360
              if: always()
              uses: ./.github/actions/aws-eks-cleanup-resources
              with:
                  s3-backend-bucket: ${{ env.S3_BACKEND_BUCKET }}
                  s3-bucket-region: ${{ env.S3_BUCKET_REGION }}
                  camunda-version: ${{ steps.camunda-version.outputs.CAMUNDA_VERSION }}
                  max-age-hours: ${{ env.MAX_AGE_HOURS }}
                  target: all

            # There are cases where the deletion of resources fails due to dependencies.
            - name: Retry delete orphaned resources
              id: retry-delete-orphaned-resources
              timeout-minutes: 360
              if: failure() && steps.delete-orphaned-resources.outcome == 'failure'
              uses: ./.github/actions/aws-eks-cleanup-resources
              with:
                  s3-backend-bucket: ${{ env.S3_BACKEND_BUCKET }}
                  s3-bucket-region: ${{ env.S3_BUCKET_REGION }}
                  camunda-version: ${{ steps.camunda-version.outputs.CAMUNDA_VERSION }}
                  max-age-hours: 0 # the previous step alters the age and resets it to 0
                  target: all

            - name: Notify in Slack in case of failure
              id: slack-notification
              if: failure() && env.IS_SCHEDULE == 'true' && steps.retry-delete-orphaned-resources.outcome == 'failure'
              uses: camunda/infraex-common-config/.github/actions/report-failure-on-slack@e9a9f33ab193348a82a79bd9250fdf12f708390a # 1.2.19
              with:
                  vault_addr: ${{ secrets.VAULT_ADDR }}
                  vault_role_id: ${{ secrets.VAULT_ROLE_ID }}
                  vault_secret_id: ${{ secrets.VAULT_SECRET_ID }}
