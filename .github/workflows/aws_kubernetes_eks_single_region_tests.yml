---
name: Tests - Integration - AWS Kubernetes EKS Single Region (IRSA)

permissions:
    contents: read # don't allow commits
    pull-requests: write # allow comments, labels (used by internal-apply-skip-label)

on:
    schedule:
        - cron: 0 3 * * 3 # Runs at 3 AM on Wednesdays
    pull_request:
        paths:
            - .github/workflows/aws_kubernetes_eks_single_region_tests.yml
            - .tool-versions
            - generic/kubernetes/single-region/**
            - aws/kubernetes/eks-single-region*/**
            - '!aws/kubernetes/eks-single-region/test/golden/**'
            - '!aws/kubernetes/eks-single-region-irsa/test/golden/**'
            - .github/actions/aws-kubernetes-eks-single-region-create/**
            - .github/actions/aws-configure-cli/**
            - .github/actions/internal-apply-skip-label/**
            - .github/actions/aws-kubernetes-eks-single-region-cleanup/**

    workflow_dispatch:
        inputs:
            cluster_name:
                description: Cluster name.
                required: false
                type: string
            delete_clusters:
                description: Whether to delete the clusters.
                type: boolean
                default: true
            enable_tests:
                description: Whether to enable the tests.
                type: boolean
                default: true
            ref-arch:
                description: |
                    Reference architecture to use, can only deploy one at a time.
                    Use a different trigger with unique names for each ref-arch.
                    Valid values are `eks-single-region` and `eks-single-region-irsa`.
                required: false
                type: string
                default: eks-single-region

# limit to a single execution per actor of this workflow
concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    # in case of renovate we don't cancel the previous run, so it can finish it
    # otherwise weekly renovate PRs with tf docs updates result in broken clusters
    cancel-in-progress: ${{ !contains('renovate[bot]', github.actor) }}

env:
    IS_SCHEDULE: ${{ contains(github.head_ref, 'schedules/') || github.event_name == 'schedule' && 'true' || 'false' }}
    IS_RENOVATE_PR: ${{ github.event_name == 'pull_request' && github.event.pull_request.user.login == 'renovate[bot]' }}

    AWS_PROFILE: infraex
    AWS_REGION: eu-west-2
    S3_BACKEND_BUCKET: tests-ra-aws-rosa-hcp-tf-state-eu-central-1
    S3_BUCKET_REGION: eu-central-1
    TLD: camunda.ie
    MAIL_OVERWRITE: admin@camunda.ie

    CLEANUP_CLUSTERS: ${{ github.event.inputs.delete_clusters || 'true' }}

    # TEST VARIABLES

    # Vars with "CI_" prefix are used in the CI workflow only.
    CI_MATRIX_FILE: .github/workflows-config/aws-kubernetes-eks-single-region/test_matrix.yml

    # Docker Hub auth to avoid image pull rate limit.
    # Vars with "TEST_" prefix are used in the test runner tool (Task).
    TESTS_ENABLED: ${{ github.event.inputs.enable_tests || 'true' }}
    # TODO: [release-duty] before the release, update repo ref!
    # renovate: datasource=github-tags depName=camunda/camunda-platform-helm
    TESTS_CAMUNDA_HELM_CHART_REPO_REF: main   # git reference used to clone the camunda/camunda-platform-helm repository to perform the tests
    TESTS_CAMUNDA_HELM_CHART_REPO_PATH: ./.camunda_helm_repo   # where to clone it

    # Optional components that are not enabled by default in the doc
    WEBMODELER_ENABLED: 'true'
    CONSOLE_ENABLED: 'true'

jobs:
    triage:
        runs-on: ubuntu-latest
        outputs:
            should_skip: ${{ steps.skip_check.outputs.should_skip }}
        steps:
            - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
            - name: Check labels
              id: skip_check
              uses: ./.github/actions/internal-triage-skip

    clusters-info:
        needs:
            - triage
        if: needs.triage.outputs.should_skip == 'false'
        name: Define Matrix
        runs-on: ubuntu-latest
        outputs:
            platform-matrix: ${{ steps.matrix.outputs.platform-matrix }}
        steps:
            - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
              with:
                  fetch-depth: 0

            - name: Install asdf tools with cache
              uses: camunda/infraex-common-config/./.github/actions/asdf-install-tooling@791f01a12a6b0c44f16a1dce9c9791de34ec4767 # 1.3.8

            - id: matrix
              # we define a global matrix in an external file due to https://github.com/orgs/community/discussions/26284
              run: |
                  set -euo pipefail

                  # Generate cluster name.
                  # shellcheck disable=SC2086
                  scenario_indexes="$(yq '.matrix.scenario | to_entries | .[] | .key' ${CI_MATRIX_FILE})"

                  PR_NUMBER=0
                  if [[ "${{ github.event_name }}" == "pull_request" ]]; then
                      PR_NUMBER=${{ github.event.pull_request.number}}
                  fi

                  # Loop over scenarios.
                  # Vars are exported to pass them to yq instead of local inline syntax.
                  # shellcheck disable=SC2086
                  for scenario_index in ${scenario_indexes}; do
                    cluster_name_input="${{ inputs.cluster_name }}"
                    # limiting factor are OpenSearch domains of maximum 28 characters
                    cluster_name_fallback="eks-sr-$PR_NUMBER-$(uuidgen | head -c 5)"
                    export cluster_name="${cluster_name_input:-${cluster_name_fallback}}"
                    export scenario_index="${scenario_index}"
                    yq -i '.matrix.scenario[env(scenario_index)].clusterName = env(cluster_name)' "${CI_MATRIX_FILE}"
                  done

                  echo "Filtering the matrix with strategy IS_SCHEDULE=$IS_SCHEDULE or IS_RENOVATE_PR=$IS_RENOVATE_PR"
                  if [[ "$IS_SCHEDULE" == "true" || "$IS_RENOVATE_PR" == "true" ]]; then
                    echo "This PR is scheduled or coming from renovate, we test all scenarios without filtering."
                    # shellcheck disable=SC2086
                    platform_matrix="$(yq '.matrix' --indent=0 --output-format json ${CI_MATRIX_FILE})"
                  else
                    # shellcheck disable=SC2086
                    platform_matrix="$(yq '(.matrix |= (.distro |= map(select(.schedule_only == null or .schedule_only == false)))) | .matrix' \
                        --indent=0 --output-format json "${CI_MATRIX_FILE}")"
                  fi

                  if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
                    echo "Filtering based on supplied ref-arch ${{ inputs.ref-arch }}"
                    platform_matrix=$(yq '(.matrix |= (.scenario |= map(select(.name == \"${{ inputs.ref-arch }}\")))) | .matrix' \
                      --indent=0 --output-format json "${CI_MATRIX_FILE}")
                  fi

                  echo "${platform_matrix}" | jq
                  echo "platform-matrix=${platform_matrix}" > "$GITHUB_OUTPUT"

    prepare-clusters:
        name: Prepare clusters
        needs:
            - clusters-info
        strategy:
            fail-fast: false
            matrix:
                scenario: ${{ fromJson(needs.clusters-info.outputs.platform-matrix).scenario }}
        runs-on: ubuntu-latest
        env:
            TF_MODULES_PATH: ./.action-tf-modules/aws-kubernetes-eks-single-region-create/
        steps:
            - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
              with:
                  ref: ${{ github.ref }}
                  fetch-depth: 0

            - name: Install asdf tools with cache
              uses: camunda/infraex-common-config/./.github/actions/asdf-install-tooling@791f01a12a6b0c44f16a1dce9c9791de34ec4767 # 1.3.8

            - name: Import Secrets
              id: secrets
              uses: hashicorp/vault-action@7709c609789c5e27b757a85817483caadbb5939a # v3
              with:
                  url: ${{ secrets.VAULT_ADDR }}
                  method: approle
                  roleId: ${{ secrets.VAULT_ROLE_ID }}
                  secretId: ${{ secrets.VAULT_SECRET_ID }}
                  exportEnv: false
                  secrets: |
                      secret/data/products/infrastructure-experience/ci/common CI_ENCRYPTION_KEY;

            - name: Configure AWS CLI
              uses: ./.github/actions/aws-configure-cli
              with:
                  vault-addr: ${{ secrets.VAULT_ADDR }}
                  vault-role-id: ${{ secrets.VAULT_ROLE_ID }}
                  vault-secret-id: ${{ secrets.VAULT_SECRET_ID }}
                  aws-profile: ${{ env.AWS_PROFILE }}
                  aws-region: ${{ env.AWS_REGION }}

            - name: Set current Camunda version
              id: camunda-version
              run: |
                  set -euo pipefail
                  CAMUNDA_VERSION=$(cat .camunda-version)
                  echo "CAMUNDA_VERSION=$CAMUNDA_VERSION" | tee -a "$GITHUB_OUTPUT"

            - name: Export S3_BACKEND_BUCKET based on matrix
              id: s3_prefix
              run: |
                  set -euo pipefail
                  echo "S3_BACKEND_BUCKET_PREFIX=aws/kubernetes/${{ matrix.scenario.name }}/" | tee -a "$GITHUB_OUTPUT"

            - name: Create K8S cluster and login
              uses: ./.github/actions/aws-kubernetes-eks-single-region-create
              id: create_cluster
              # Do not interrupt tests; otherwise, the Terraform state may become inconsistent.
              if: always() && success()
              with:
                  cluster-name: ${{ matrix.scenario.clusterName }}
                  aws-region: ${{ env.AWS_REGION }}
                  s3-backend-bucket: ${{ env.S3_BACKEND_BUCKET }}
                  s3-bucket-region: ${{ env.S3_BUCKET_REGION }}
                  s3-bucket-key-prefix: ${{ steps.s3_prefix.outputs.S3_BACKEND_BUCKET_PREFIX }}${{ steps.camunda-version.outputs.CAMUNDA_VERSION }}/
                  tf-modules-revision: ${{ github.ref }}
                  tf-modules-path: ${{ env.TF_MODULES_PATH }}
                  ref-arch: ${{ matrix.scenario.name }}
                  tags: >
                      {
                        "ci-run-id": "${{ github.run_id }}",
                        "ci-run-number": "${{ github.run_number }}",
                        "ci-workflow": "${{ github.workflow }}",
                        "ci-actor": "${{ github.actor }}",
                        "ci-ref": "${{ github.ref }}",
                        "ci-commit": "${{ github.sha }}",
                        "ci-repo": "${{ github.repository }}",
                        "ci-event": "${{ github.event_name }}"
                      }

            # We are exporting everything for irsa and non-irsa, worst case it's empty and not used
            # Reason for skipping pipefail in the next step
            - name: Export relevant Terraform outputs
              if: always()
              working-directory: ${{ env.TF_MODULES_PATH }}/aws/kubernetes/${{ matrix.scenario.name }}/
              id: encrypt_outputs
              run: |
                  source ${{ github.workspace }}/aws/kubernetes/${{ matrix.scenario.name }}/procedure/export-helm-values.sh
                  source ${{ github.workspace }}/aws/kubernetes/${{ matrix.scenario.name }}/procedure/vars-create-db.sh

                  if [[ "${{ matrix.scenario.name }}" =~ "irsa" ]]; then
                      source ${{ github.workspace }}/aws/kubernetes/${{ matrix.scenario.name }}/procedure/vars-create-os.sh
                  fi

                  {
                    # Export to file to pass to other jobs
                    echo "CERT_MANAGER_IRSA_ARN=$CERT_MANAGER_IRSA_ARN"
                    echo "EXTERNAL_DNS_IRSA_ARN=$EXTERNAL_DNS_IRSA_ARN"

                    # PostgreSQL
                    echo "DB_KEYCLOAK_NAME=$DB_KEYCLOAK_NAME"
                    echo "DB_KEYCLOAK_USERNAME=$DB_KEYCLOAK_USERNAME"
                    echo "CAMUNDA_KEYCLOAK_SERVICE_ACCOUNT_NAME=$CAMUNDA_KEYCLOAK_SERVICE_ACCOUNT_NAME"
                    echo "DB_KEYCLOAK_PASSWORD=$DB_KEYCLOAK_PASSWORD"


                    echo "DB_IDENTITY_NAME=$DB_IDENTITY_NAME"
                    echo "DB_IDENTITY_USERNAME=$DB_IDENTITY_USERNAME"
                    echo "CAMUNDA_IDENTITY_SERVICE_ACCOUNT_NAME=$CAMUNDA_IDENTITY_SERVICE_ACCOUNT_NAME"
                    echo "DB_IDENTITY_PASSWORD=$DB_IDENTITY_PASSWORD"

                    echo "DB_WEBMODELER_NAME=$DB_WEBMODELER_NAME"
                    echo "DB_WEBMODELER_USERNAME=$DB_WEBMODELER_USERNAME"
                    echo "CAMUNDA_WEBMODELER_SERVICE_ACCOUNT_NAME=$CAMUNDA_WEBMODELER_SERVICE_ACCOUNT_NAME"
                    echo "DB_WEBMODELER_PASSWORD=$DB_WEBMODELER_PASSWORD"

                    echo "DB_HOST=$DB_HOST"
                    echo "DB_ROLE_KEYCLOAK_NAME=$DB_ROLE_KEYCLOAK_NAME"
                    echo "DB_ROLE_KEYCLOAK_ARN=$DB_ROLE_KEYCLOAK_ARN"
                    echo "DB_ROLE_IDENTITY_NAME=$DB_ROLE_IDENTITY_NAME"
                    echo "DB_ROLE_IDENTITY_ARN=$DB_ROLE_IDENTITY_ARN"
                    echo "DB_ROLE_WEBMODELER_NAME=$DB_ROLE_WEBMODELER_NAME"
                    echo "DB_ROLE_WEBMODELER_ARN=$DB_ROLE_WEBMODELER_ARN"

                    # OpenSearch
                    echo "OPENSEARCH_HOST=$OPENSEARCH_HOST"
                    echo "OPENSEARCH_ROLE_NAME=$OPENSEARCH_ROLE_NAME"
                    echo "OPENSEARCH_ROLE_ARN=$OPENSEARCH_ROLE_ARN"
                    echo "CAMUNDA_ZEEBE_SERVICE_ACCOUNT_NAME=$CAMUNDA_ZEEBE_SERVICE_ACCOUNT_NAME"
                    echo "CAMUNDA_OPERATE_SERVICE_ACCOUNT_NAME=$CAMUNDA_OPERATE_SERVICE_ACCOUNT_NAME"
                    echo "CAMUNDA_TASKLIST_SERVICE_ACCOUNT_NAME=$CAMUNDA_TASKLIST_SERVICE_ACCOUNT_NAME"
                    echo "CAMUNDA_OPTIMIZE_SERVICE_ACCOUNT_NAME=$CAMUNDA_OPTIMIZE_SERVICE_ACCOUNT_NAME"

                    echo "AURORA_ENDPOINT=$AURORA_ENDPOINT"
                    echo "AURORA_PORT=$AURORA_PORT"
                    echo "AURORA_USERNAME=$AURORA_USERNAME"
                    echo "AURORA_PASSWORD=$AURORA_PASSWORD"

                    echo "OPENSEARCH_MASTER_USERNAME=$OPENSEARCH_MASTER_USERNAME"
                    echo "OPENSEARCH_MASTER_PASSWORD=$OPENSEARCH_MASTER_PASSWORD"
                  } >> outputs_raw

                  openssl enc -aes-256-cbc -salt -in outputs_raw -out encrypted_outputs_raw.enc -pass pass:"${{ steps.secrets.outputs.CI_ENCRYPTION_KEY }}" -pbkdf2
                  encrypted_outputs_raw_base64=$(base64 -w 0 encrypted_outputs_raw.enc)
                  echo "outputs_raw=${encrypted_outputs_raw_base64}" >> "$GITHUB_OUTPUT"

            # Write for matrix outputs workaround
            - uses: cloudposse/github-action-matrix-outputs-write@ed06cf3a6bf23b8dce36d1cf0d63123885bb8375 # v1
              if: always()
              id: out
              with:
                  matrix-step-name: ${{ github.job }}
                  matrix-key: ${{ matrix.scenario.name }}
                  outputs: |-
                      outputs_raw: ${{ steps.encrypt_outputs.outputs.outputs_raw }}

    access-info:
        name: Read outputs from matrix
        runs-on: ubuntu-latest
        if: always()
        needs: prepare-clusters
        outputs:
            outputs_raw: ${{ steps.read-workflow.outputs.result }}
        steps:
            - uses: cloudposse/github-action-matrix-outputs-read@33cac12fa9282a7230a418d859b93fdbc4f27b5a # v1
              id: read-workflow
              with:
                  matrix-step-name: prepare-clusters

    integration-tests:
        name: Run integration tests - ${{ matrix.scenario.name }} - ${{ matrix.declination.name }}
        runs-on: ubuntu-latest
        concurrency:
            # instead of running sequentially in a matrix, we use concurrency to run the different scenarios in parallel but the declinations sequentially
            # max-parallel would limit us to run 1 matrix job but this way we can run 2 jobs in parallel.
            group: ${{ github.workflow }}-${{ github.ref }}-${{ matrix.scenario.name }}
            cancel-in-progress: false
        needs:
            - prepare-clusters
            - access-info
            - clusters-info
        strategy:
            fail-fast: false
            matrix:
                scenario: ${{ fromJson(needs.clusters-info.outputs.platform-matrix).scenario }}
                declination: ${{ fromJson(needs.clusters-info.outputs.platform-matrix).declination }}
        env:
            # https://github.com/camunda/camunda-platform-helm/blob/test/integration/scenarios/chart-full-setup/Taskfile.yaml#L12C15-L12C32
            TEST_CLUSTER_TYPE: kubernetes
        steps:
            - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

            - name: Install asdf tools with cache for the project
              uses: camunda/infraex-common-config/./.github/actions/asdf-install-tooling@791f01a12a6b0c44f16a1dce9c9791de34ec4767 # 1.3.8

            - name: Import Secrets
              id: secrets
              uses: hashicorp/vault-action@7709c609789c5e27b757a85817483caadbb5939a # v3
              with:
                  url: ${{ secrets.VAULT_ADDR }}
                  method: approle
                  roleId: ${{ secrets.VAULT_ROLE_ID }}
                  secretId: ${{ secrets.VAULT_SECRET_ID }}
                  exportEnv: false
                  secrets: |
                      secret/data/products/infrastructure-experience/ci/common DOCKERHUB_USER;
                      secret/data/products/infrastructure-experience/ci/common DOCKERHUB_PASSWORD;
                      secret/data/products/infrastructure-experience/ci/common CI_CAMUNDA_USER_TEST_CLIENT_ID;
                      secret/data/products/infrastructure-experience/ci/common CI_CAMUNDA_USER_TEST_CLIENT_SECRET;
                      secret/data/products/infrastructure-experience/ci/common CI_ENCRYPTION_KEY;

            - name: Configure AWS CLI
              uses: ./.github/actions/aws-configure-cli
              with:
                  vault-addr: ${{ secrets.VAULT_ADDR }}
                  vault-role-id: ${{ secrets.VAULT_ROLE_ID }}
                  vault-secret-id: ${{ secrets.VAULT_SECRET_ID }}
                  aws-profile: ${{ env.AWS_PROFILE }}
                  aws-region: ${{ env.AWS_REGION }}

            - name: 🚢 Export outputs as environment variables
              timeout-minutes: 3
              run: |
                  set -euo pipefail

                  echo "${{ fromJson(needs.access-info.outputs.outputs_raw).outputs_raw[matrix.scenario.name] }}" | base64 --decode > encrypted_outputs_raw.enc
                  openssl enc -aes-256-cbc -d -in encrypted_outputs_raw.enc -out "outputs_raw" -pass pass:"${{ steps.secrets.outputs.CI_ENCRYPTION_KEY }}" -pbkdf2
                  rm encrypted_outputs_raw.enc

                  # Export the decrypted outputs as environment variables
                  while IFS= read -r line; do
                    echo "$line" | tee -a "$GITHUB_ENV"
                  done < outputs_raw

            - name: 🔐 Login into the cluster
              timeout-minutes: 10
              run: |
                  set -euo pipefail
                  aws eks --region "${{ env.AWS_REGION }}" update-kubeconfig --name "${{ matrix.scenario.clusterName }}" --alias "${{ matrix.scenario.clusterName }}"

                  kubectl config current-context
                  kubectl get nodes

            - name: 📁 Get a copy of the reference architecture
              timeout-minutes: 10
              run: |
                  # run it as specified in the doc
                  set -euo pipefail

                  ./aws/kubernetes/${{ matrix.scenario.name }}/procedure/get-your-copy.sh
                  tree

            - name: 🏗️ Ingress Setup prerequisites
              if: ${{ matrix.declination.name == 'domain' }}
              run: |
                  set -euo pipefail

                  export REGION=${{ env.AWS_REGION }}

                  source generic/kubernetes/single-region/procedure/export-ingress-setup-vars.sh

                  # Overwriting the mail
                  export MAIL=${{ env.MAIL_OVERWRITE }}

                  ./aws/kubernetes/${{ matrix.scenario.name }}/procedure/install-ingress-nginx.sh

                  export EXTERNAL_DNS_OWNER_ID="external-dns-${{ matrix.scenario.clusterName }}-${{ matrix.scenario.name }}"
                  ./aws/kubernetes/${{ matrix.scenario.name }}/procedure/install-external-dns.sh

                  ./generic/kubernetes/single-region/procedure/install-cert-manager-crds.sh

                  ./aws/kubernetes/${{ matrix.scenario.name }}/procedure/install-cert-manager.sh

                  ./aws/kubernetes/${{ matrix.scenario.name }}/procedure/install-cert-manager-issuer.sh

            - name: 🌱 Register chart setup environment values
              timeout-minutes: 3
              run: |
                  set -euo pipefail

                  # the chart env should be loaded by the client at the very first step of his installation
                  source .github/scripts/gha-functions.sh
                  export_new_env_vars generic/kubernetes/single-region/procedure/chart-env.sh

            - name: 🏗️ Prepare a fresh namespace for the tests
              timeout-minutes: 3
              run: |
                  set -euo pipefail

                  # Delete the namespace to ensure a fresh start
                  if kubectl get namespace "$CAMUNDA_NAMESPACE" &>/dev/null; then
                  kubectl delete namespace "$CAMUNDA_NAMESPACE" --wait
                  while kubectl get namespace "$CAMUNDA_NAMESPACE" &>/dev/null; do
                      echo "Namespace $CAMUNDA_NAMESPACE still being deleted, waiting..."
                      sleep 5
                  done
                  fi

                  # Create the namespace
                  kubectl create namespace "$CAMUNDA_NAMESPACE"

            - name: 🧹 Clean up databases
              timeout-minutes: 10
              run: |
                  set -euo pipefail

                  # Requires db secrets to be created
                  ./aws/kubernetes/${{ matrix.scenario.name }}/procedure/create-setup-db-secret.sh

                  if [[ "${{ matrix.scenario.name }}" =~ "irsa" ]]; then
                      ./aws/kubernetes/${{ matrix.scenario.name }}/procedure/create-setup-os-secret.sh
                  else
                    # for non irsa, we don't need credentials but want to reuse the same job
                    kubectl create secret generic setup-os-secret --namespace "$CAMUNDA_NAMESPACE" \
                    --from-literal=OPENSEARCH_HOST="$OPENSEARCH_HOST" \
                    --from-literal=OPENSEARCH_MASTER_USERNAME="" \
                    --from-literal=OPENSEARCH_MASTER_PASSWORD=""
                  fi

                  # Reset PostgreSQL
                  kubectl apply -f ./aws/kubernetes/eks-single-region/test/reset-aurora-postgres.yml --namespace "$CAMUNDA_NAMESPACE"

                  # Wait for the job to complete
                  while true; do
                      STATUS=$(kubectl get job reset-aurora-postgres --namespace "$CAMUNDA_NAMESPACE" -o jsonpath='{.status.succeeded}')

                      if [[ "$STATUS" == "1" ]]; then
                          echo "Job completed successfully."
                          break
                      fi

                      echo "Waiting for job to complete..."
                      sleep 5
                  done
                  echo "[DEBUG] Job log:"
                  kubectl logs job/reset-aurora-postgres --namespace "$CAMUNDA_NAMESPACE"
                  kubectl delete job reset-aurora-postgres --namespace "$CAMUNDA_NAMESPACE"

                  kubectl delete secret setup-db-secret --namespace "$CAMUNDA_NAMESPACE"

                  # Reset OpenSearch
                  kubectl apply -f ./aws/kubernetes/eks-single-region/test/reset-opensearch.yml --namespace "$CAMUNDA_NAMESPACE"

                  # Wait for the job to complete
                  while true; do
                      STATUS=$(kubectl get job reset-opensearch --namespace "$CAMUNDA_NAMESPACE" -o jsonpath='{.status.succeeded}')

                      if [[ "$STATUS" == "1" ]]; then
                          echo "Job completed successfully."
                          break
                      fi

                      echo "Waiting for job to complete..."
                      sleep 5
                  done
                  echo "[DEBUG] Job log:"
                  kubectl logs job/reset-opensearch --namespace "$CAMUNDA_NAMESPACE"
                  kubectl delete job reset-opensearch --namespace "$CAMUNDA_NAMESPACE"

                  kubectl delete secret setup-os-secret --namespace "$CAMUNDA_NAMESPACE"

            - name: 🛠️ Assemble deployment values of aws/kubernetes/${{ matrix.scenario.name }}/${{ matrix.declination.name }}
              timeout-minutes: 10
              run: |
                  set -o errexit
                  set -euxo pipefail

                  echo "Construct the values.yml file"

                  cp -f aws/kubernetes/${{ matrix.scenario.name }}/helm-values/values-${{ matrix.declination.name }}.yml ./values.yml

                  if [[ "${{ matrix.declination.name }}" == "domain" ]]; then
                    export DOMAIN_NAME="${{ matrix.scenario.clusterName }}-${{ matrix.scenario.name }}.${{ env.TLD }}"
                    echo "DOMAIN_NAME=$DOMAIN_NAME" | tee -a "$GITHUB_ENV"

                    export DOMAIN_NAME_GRPC="zeebe.$DOMAIN_NAME:443"
                    echo "DOMAIN_NAME_GRPC=$DOMAIN_NAME_GRPC" | tee -a "$GITHUB_ENV"
                  fi

                  if [ "$WEBMODELER_ENABLED" == "true" ]; then
                    echo "Enabling WebModeler"
                    yq -i '.webModeler.enabled = true' values.yml
                  fi

                  if [ "$CONSOLE_ENABLED" == "true" ]; then
                    echo "Enabling Console"
                    yq -i '.console.enabled = true' values.yml
                  fi

                  # Add integration tests values
                  if [ "$TESTS_ENABLED" == "true" ]; then
                    for file in registry.yml identity.yml; do
                      yq ". *+ load(\"generic/kubernetes/single-region/tests/helm-values/$file\")" values.yml > values-result.yml
                      cat values-result.yml && mv values-result.yml values.yml
                    done
                  fi

                  ./generic/kubernetes/single-region/procedure/assemble-envsubst-values.sh

            - name: 🛠️ Configure the PSQL database and associated access
              timeout-minutes: 10
              run: |
                  set -euo pipefail
                  ./aws/kubernetes/${{ matrix.scenario.name }}/procedure/check-env-variables.sh
                  ./aws/kubernetes/${{ matrix.scenario.name }}/procedure/create-setup-db-secret.sh

                  kubectl apply -f ./aws/kubernetes/${{ matrix.scenario.name }}/setup-postgres-create-db.yml --namespace "$CAMUNDA_NAMESPACE"

                  # Wait for the job to complete
                  while true; do
                      STATUS=$(kubectl get job create-setup-user-db --namespace "$CAMUNDA_NAMESPACE" -o jsonpath='{.status.succeeded}')

                      if [[ "$STATUS" == "1" ]]; then
                          echo "Job completed successfully."
                          break
                      fi

                      echo "Waiting for job to complete..."
                      sleep 5
                  done

                  echo "[DEBUG] Job log:"
                  kubectl logs job/create-setup-user-db --namespace "$CAMUNDA_NAMESPACE"

                  kubectl delete job create-setup-user-db --namespace "$CAMUNDA_NAMESPACE"
                  kubectl delete secret setup-db-secret --namespace "$CAMUNDA_NAMESPACE"

            - name: 💪 Execute DB secret creation scripts
              if: ${{ !contains(matrix.scenario.name, 'irsa') }}
              timeout-minutes: 10
              run: |
                  set -euo pipefail
                  ./aws/kubernetes/${{ matrix.scenario.name }}/procedure/create-external-db-secrets.sh

            - name: 🛠️ Configure OpenSearch fine grained access control
              if: contains(matrix.scenario.name, 'irsa')
              timeout-minutes: 10
              run: |
                  set -euo pipefail

                  ./aws/kubernetes/${{ matrix.scenario.name }}/procedure/create-setup-os-secret.sh

                  kubectl apply -f ./aws/kubernetes/${{ matrix.scenario.name }}/setup-opensearch-fgac.yml --namespace "$CAMUNDA_NAMESPACE"

                  # Wait for the job to complete
                  while true; do
                      STATUS=$(kubectl get job setup-opensearch-fgac --namespace "$CAMUNDA_NAMESPACE" -o jsonpath='{.status.succeeded}')

                      if [[ "$STATUS" == "1" ]]; then
                          echo "Job completed successfully."
                          break
                      fi

                      echo "Waiting for job to complete..."
                      sleep 5
                  done

                  echo "[DEBUG] Job log:"
                  kubectl logs job/setup-opensearch-fgac --namespace "$CAMUNDA_NAMESPACE"

                  kubectl delete job setup-opensearch-fgac --namespace "$CAMUNDA_NAMESPACE"
                  kubectl delete secret setup-os-secret --namespace "$CAMUNDA_NAMESPACE"

            - name: 🏁 Install Camunda 8 using the generic/kubernetes helm chart procedure
              timeout-minutes: 10
              run: |
                  set -euo pipefail

                  source generic/kubernetes/single-region/procedure/generate-passwords.sh

                  ./generic/kubernetes/single-region/procedure/create-identity-secret.sh

                  # Generate tests objects
                  if [ "$TESTS_ENABLED" == "true" ]; then
                    # Create the pull secrets described in generic/kubernetes/single-region/tests/helm-values/registry.yml
                    kubectl create secret docker-registry index-docker-io \
                        --docker-server=index.docker.io \
                        --docker-username="${{ steps.secrets.outputs.DOCKERHUB_USER }}" \
                        --docker-password="${{ steps.secrets.outputs.DOCKERHUB_PASSWORD }}" \
                        --namespace="$CAMUNDA_NAMESPACE"

                    kubectl create secret generic identity-secret-for-components-integration \
                        --from-literal=identity-admin-client-id="${{ steps.secrets.outputs.CI_CAMUNDA_USER_TEST_CLIENT_ID }}" \
                        --from-literal=identity-admin-client-secret="${{ steps.secrets.outputs.CI_CAMUNDA_USER_TEST_CLIENT_SECRET }}" \
                        --namespace="$CAMUNDA_NAMESPACE"
                  fi

                  ./generic/kubernetes/single-region/procedure/install-chart.sh

            - name: 👀⏳ Wait for the deployment to be healthy using generic/kubernetes/single-region
              timeout-minutes: 10
              run: |
                  set -euo pipefail
                  ./generic/kubernetes/single-region/procedure/check-deployment-ready.sh

            - name: 📐 Set current Camunda version
              id: camunda-version
              run: |
                  set -euo pipefail
                  CAMUNDA_VERSION=$(cat .camunda-version)
                  echo "CAMUNDA_VERSION=$CAMUNDA_VERSION" | tee -a "$GITHUB_OUTPUT"

            - name: 🧪 Run Helm Chart tests
              if: env.TESTS_ENABLED == 'true'
              timeout-minutes: 60
              uses: ./.github/actions/internal-camunda-chart-tests
              with:
                  secrets: ${{ toJSON(secrets) }}
                  camunda-version: ${{ steps.camunda-version.outputs.CAMUNDA_VERSION }}
                  camunda-domain: ${{ env.DOMAIN_NAME }}
                  camunda-domain-grpc: ${{ env.DOMAIN_NAME_GRPC }}
                  webmodeler-enabled: ${{ env.WEBMODELER_ENABLED }}
                  console-enabled: ${{ env.CONSOLE_ENABLED }}
                  elasticsearch-enabled: 'false'
                  tests-camunda-helm-chart-repo-ref: ${{ env.TESTS_CAMUNDA_HELM_CHART_REPO_REF }}
                  tests-camunda-helm-chart-repo-path: ${{ env.TESTS_CAMUNDA_HELM_CHART_REPO_PATH }}
                  test-namespace: ${{ env.CAMUNDA_NAMESPACE }}
                  test-cluster-type: ${{ env.TEST_CLUSTER_TYPE }}
                  test-release-name: ${{ env.CAMUNDA_RELEASE_NAME }}

            - name: 🔬🚨 Get failed Pods info
              timeout-minutes: 10
              if: failure()
              run: |
                  set -euo pipefail

                  kubectl -n "$CAMUNDA_NAMESPACE" get po
                  kubectl -n "$CAMUNDA_NAMESPACE" get po | grep -v "Completed" | awk '/0\//{print $1}' | while read -r pod_name; do
                    echo -e "\n###Failed Pod: ${pod_name}###\n";
                    kubectl -n "$CAMUNDA_NAMESPACE" describe po "$pod_name";
                    kubectl -n "$CAMUNDA_NAMESPACE" logs "$pod_name";
                  done

            - name: 🧹 Cleanup Namespace
              if: always() && env.CLEANUP_CLUSTERS == 'true'
              run: |
                  set -euo pipefail

                  helm uninstall camunda --namespace "$CAMUNDA_NAMESPACE" --wait
                  kubectl delete namespace "$CAMUNDA_NAMESPACE" --wait

            - name: 🧹 Cleanup domain specific resources
              if: always() && matrix.declination.name == 'domain' && env.CLEANUP_CLUSTERS == 'true'
              run: |
                  set -euo pipefail

                  echo "Let external-dns remove the domain" && sleep 45

                  helm uninstall ingress-nginx --namespace ingress-nginx --wait
                  helm uninstall external-dns --namespace external-dns --wait
                  helm uninstall cert-manager --namespace cert-manager --wait

    cleanup-clusters:
        name: Cleanup EKS clusters
        if: always()
        runs-on: ubuntu-latest
        needs:
            - integration-tests
            - clusters-info
        strategy:
            fail-fast: false
            matrix:
                scenario: ${{ fromJson(needs.clusters-info.outputs.platform-matrix).scenario }}
        steps:
            - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
              if: env.CLEANUP_CLUSTERS == 'true'
              with:
                  fetch-depth: 0

            - name: Install asdf tools with cache
              if: env.CLEANUP_CLUSTERS == 'true'
              uses: camunda/infraex-common-config/./.github/actions/asdf-install-tooling@791f01a12a6b0c44f16a1dce9c9791de34ec4767 # 1.3.8

            - name: Import Secrets
              id: secrets
              uses: hashicorp/vault-action@7709c609789c5e27b757a85817483caadbb5939a # v3
              if: env.CLEANUP_CLUSTERS == 'true'
              with:
                  url: ${{ secrets.VAULT_ADDR }}
                  method: approle
                  roleId: ${{ secrets.VAULT_ROLE_ID }}
                  secretId: ${{ secrets.VAULT_SECRET_ID }}
                  exportEnv: false
                  secrets: |
                      secret/data/products/infrastructure-experience/ci/common CI_ENCRYPTION_KEY;

            - name: Configure AWS CLI
              if: env.CLEANUP_CLUSTERS == 'true'
              uses: ./.github/actions/aws-configure-cli
              with:
                  vault-addr: ${{ secrets.VAULT_ADDR }}
                  vault-role-id: ${{ secrets.VAULT_ROLE_ID }}
                  vault-secret-id: ${{ secrets.VAULT_SECRET_ID }}
                  aws-profile: ${{ env.AWS_PROFILE }}
                  aws-region: ${{ env.AWS_REGION }}

            - name: Set current Camunda version
              if: env.CLEANUP_CLUSTERS == 'true'
              id: camunda-version
              run: |
                  set -euo pipefail
                  CAMUNDA_VERSION=$(cat .camunda-version)
                  echo "CAMUNDA_VERSION=$CAMUNDA_VERSION" | tee -a "$GITHUB_OUTPUT"

            - name: Export S3_BACKEND_BUCKET based on matrix
              if: env.CLEANUP_CLUSTERS == 'true'
              id: s3_prefix
              run: |
                  set -euo pipefail
                  echo "S3_BACKEND_BUCKET_PREFIX=aws/kubernetes/${{ matrix.scenario.name }}/" | tee -a "$GITHUB_OUTPUT"

            - name: Delete on-demand EKS Cluster
              uses: ./.github/actions/aws-kubernetes-eks-single-region-cleanup
              if: always() && env.CLEANUP_CLUSTERS == 'true'
              timeout-minutes: 125
              with:
                  tf-bucket: ${{ env.S3_BACKEND_BUCKET }}
                  tf-bucket-region: ${{ env.S3_BUCKET_REGION }}
                  max-age-hours-cluster: 0
                  target: ${{ matrix.scenario.clusterName }}
                  tf-bucket-key-prefix: ${{ steps.s3_prefix.outputs.S3_BACKEND_BUCKET_PREFIX }}${{ steps.camunda-version.outputs.CAMUNDA_VERSION }}/

    report-success:
        name: Report success
        runs-on: ubuntu-latest
        needs:
            - integration-tests
            - cleanup-clusters
        steps:
            - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

            - name: Prevent other runs for renovate
              if: ${{ env.IS_RENOVATE_PR == 'true' }}
              env:
                  GH_TOKEN: ${{ github.token }}
              uses: ./.github/actions/internal-apply-skip-label

    report-failure:
        name: Report failures
        if: failure()
        runs-on: ubuntu-latest
        needs:
            - report-success
        steps:
            - name: Notify in Slack in case of failure
              id: slack-notification
              if: ${{ env.IS_SCHEDULE == 'true' }}
              uses: camunda/infraex-common-config/.github/actions/report-failure-on-slack@791f01a12a6b0c44f16a1dce9c9791de34ec4767 # 1.3.8
              with:
                  vault_addr: ${{ secrets.VAULT_ADDR }}
                  vault_role_id: ${{ secrets.VAULT_ROLE_ID }}
                  vault_secret_id: ${{ secrets.VAULT_SECRET_ID }}
