---
name: Internal - Global - Pull Request TODO checker

on:
    pull_request_review_comment:
        types: [edited, deleted]
    pull_request:
        types: [opened, synchronize, reopened]

jobs:
    check-todos:
        runs-on: ubuntu-latest
        permissions:
            contents: read
            pull-requests: write

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Install todos CLI
              env:
                  # renovate: datasource=github-releases depName=ianlewis/todos
                  TODOS_VERSION: v0.13.0
              run: |
                  echo "$(go env GOPATH)/bin" >> "$GITHUB_PATH"
                  go install "github.com/ianlewis/todos/cmd/todos@${TODOS_VERSION}"

            # TODO: pin actions
            # TODO : add a cache for todos
            - name: Get PR diff and TODOs
              env:
                  GH_TOKEN: ${{ github.token }}
                  PR_NUMBER: ${{ github.event.pull_request.number }}
              run: |
                  set -euo pipefail

                  echo "🔍 Extracting added lines from PR diff"
                  gh pr diff "$PR_NUMBER" > pr.diff

                  # Collect only added lines with file+line info
                  grep '^+++' pr.diff | sed 's/+++ b\///' > files.txt
                  grep '^@@' pr.diff | awk '{print $3}' | sed 's/+//' | cut -d',' -f1 > lines.txt
                  paste -d: files.txt lines.txt > added_lines.txt

                  echo "Printing diff lines:"
                  cat added_lines.txt

                  echo "🧠 Running todos"
                  # run todos, capture exit code without failing
                  set +e
                  todos -o json > todos.json
                  code=$?
                  if [ "$code" -ne 0 ] && [ "$code" -ne 1 ]; then
                    # tod.os returns 1 if todos are found
                    exit $code
                  fi
                  set -e

                  echo "Todos found:"
                  yq todos.json

                  echo "📥 Getting current comments"
                  gh api "repos/${{ github.repository }}/pulls/${PR_NUMBER}/comments" > comments.json

                  # shellcheck disable=SC2002
                  cat todos.json | while read -r todo; do
                    echo "Processing TODO: $todo"

                    FILE=$(echo "$todo" | jq -r '.path')
                    LINE=$(echo "$todo" | jq -r '.line')
                    MESSAGE=$(echo "$todo" | jq -r '.text')

                    echo "File: $FILE"
                    echo "Line: $LINE"
                    echo "Message: $MESSAGE"

                    # Only comment if the TODO is on an added line
                    if grep -q "^$FILE:$LINE$" added_lines.txt; then
                        echo "$FILE:$LINE is in added_lines.txt"
                    else
                        echo "Skipping $FILE:$LINE - not an added line"
                        continue
                    fi

                    # Check if comment already exists and has ACK response
                    echo "Checking for existing comment in comments.json"
                    FOUND=$(jq -r --arg file "$FILE" --argjson line "$LINE" '
                        .[] | select(.path == $file and .line == $line)
                    ' comments.json)

                    if [[ "$FOUND" != "" ]]; then
                        echo "Existing comment found:"
                        echo "$FOUND"
                        ID=$(echo "$FOUND" | jq -r '.id')
                        echo "Comment ID: $ID"

                        echo "Fetching replies for comment $ID"
                        RESPONSES=$(gh api "repos/${{ github.repository }}/pulls/comments/$ID/replies")
                        echo "Replies:"
                        echo "$RESPONSES" | jq -r '.[].body'

                        if echo "$RESPONSES" | jq -r '.[].body' | grep -iq 'ACK'; then
                            echo "ACK found in replies"
                            SKIP=true
                        else
                            SKIP=false
                        fi
                    else
                        echo "No existing comment found"
                        SKIP=false
                    fi

                    if [ "$SKIP" = false ]; then
                        echo "Creating comment on $FILE:$LINE"
                        gh api "repos/${{ github.repository }}/pulls/${PR_NUMBER}/comments" \
                        -f body="TODO found: \`$MESSAGE\`" \
                        -f path="$FILE" \
                        -f line="$LINE" \
                        -f side="RIGHT"
                    else
                        echo "Skipping $FILE:$LINE due to existing ACK"
                    fi
                  done
