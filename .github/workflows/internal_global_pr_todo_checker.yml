---
name: Internal - Global - Pull Request TODO checker

on:
    pull_request_review_comment:
        types: [edited, deleted]
    pull_request:
        types: [opened, synchronize, reopened]

env:
    # renovate: datasource=github-releases depName=ianlewis/todos
    TODOS_VERSION: v0.13.0

jobs:
    check-todos:
        runs-on: ubuntu-latest
        permissions:
            contents: read
            pull-requests: write

        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0 # capture all history

            - name: Compute todos cache key
              id: cache-key
              run: |
                  export os_key=$(uname | tr '[:upper:]' '[:lower:]')
                  echo "cache_key=todos-$os_key-${{ env.TODOS_VERSION }}" | tee -a "$GITHUB_OUTPUT"
                  echo "cache_path=$(go env GOPATH)/bin/todos" >> "$GITHUB_OUTPUT"
            - name: Restore todos cache
              uses: actions/cache@v4
              with:
                  path: ${{ steps.cache-key.outputs.cache_path }}
                  key: ${{ steps.cache-key.outputs.cache_key }}

            - name: Install todos CLI if not present
              run: |
                  if [ ! -f "${{ steps.cache-key.outputs.cache_path }}/todos" ]; then
                    echo "$(go env GOPATH)/bin" >> "$GITHUB_PATH"
                    go install "github.com/ianlewis/todos/cmd/todos@${TODOS_VERSION}"
                  else
                      echo "Todos binary already installed"
                  fi

            # TODO: pin actions

            - name: Get PR diff and TODOs
              env:
                  GH_TOKEN: ${{ github.token }}
                  PR_NUMBER: ${{ github.event.pull_request.number }}
              run: |
                  set -euo pipefail

                  COMMIT_ID=$(git rev-parse HEAD)

                  echo "🔍 Getting diff from base branch"
                  BASE_SHA=$(git merge-base origin/main HEAD)
                  git diff "$BASE_SHA"...HEAD > pr.diff

                  echo "📄 Parsing added lines"
                  awk '
                  /^diff --git / { file="" }
                  /^+++ b\//     { file=substr($0,7) }
                  /^@@ / {
                    split($0, a, " ")
                    split(a[3], new, ",")
                    new_start = substr(new[1], 2)
                    curr = new_start
                  }
                  /^+/ && !/^\+\+\+/ {
                    print file ":" curr
                    curr++
                  }
                  /^[^-+]/ { curr++ }
                  ' pr.diff > added_lines.txt

                  echo "🧠 Running todos"
                  set +e
                  todos -o json > todos.json
                  code=$?
                  if [ "$code" -ne 0 ] && [ "$code" -ne 1 ]; then
                    exit $code
                  fi
                  set -e

                  echo "📥 Getting existing comments"
                  gh api "repos/${{ github.repository }}/pulls/${PR_NUMBER}/comments" > comments.json

                  echo "🔁 Processing TODOs"
                  # shellcheck disable=SC2002
                  cat todos.json | while read -r todo; do
                    FILE=$(echo "$todo" | jq -r '.path')
                    LINE=$(echo "$todo" | jq -r '.line')
                    TEXT=$(echo "$todo" | jq -r '.text')

                    echo "Checking $FILE:$LINE"

                    # Only comment if line was added in PR
                    if ! grep -q "^$FILE:$LINE$" added_lines.txt; then
                      echo "❌ $FILE:$LINE not in added lines"
                      continue
                    fi

                    echo "✅ $FILE:$LINE is in added lines"

                    # Check for existing comment on same line
                    EXISTING=$(jq -r --arg file "$FILE" --argjson line "$LINE" \
                      '.[] | select(.path == $file and .line == $line)' comments.json)

                    SKIP=false

                    if [ -n "$EXISTING" ]; then
                      ID=$(echo "$EXISTING" | jq -r '.id')
                      RESPONSES=$(gh api "repos/${{ github.repository }}/pulls/comments/$ID/replies")
                      if echo "$RESPONSES" | jq -r '.[].body' | grep -Ei 'ACK|Ignore' > /dev/null; then
                        echo "🔕 Already acknowledged or ignored"
                        SKIP=true
                      fi
                    fi

                    if [ "$SKIP" = false ]; then
                      COMMENT_BODY="**github-actions bot**

                      A new Todo was discovered. If it is not a priority right now, consider marking it for later attention.
                        TODO: \`$TEXT\`

                      <sub>Reply with \`Ignore\` to prevent further reminders for this line.</sub>"

                      echo "💬 Commenting on $FILE:$LINE"
                      gh api "repos/${{ github.repository }}/pulls/${PR_NUMBER}/comments" \
                        -f body="$COMMENT_BODY" \
                        -f path="$FILE" \
                        -f commit_id="$COMMIT_ID" \
                        -f subject_type="line" \
                        -f side="RIGHT" \
                        -f line="$LINE"
                    else
                      echo "🙈 Skipping $FILE:$LINE due to ACK or Ignore"
                    fi
                  done
