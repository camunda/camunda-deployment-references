---
global:
    elasticsearch:
        enabled: false
    opensearch:
        enabled: true
        aws:
            enabled: false # we rely on anonymous auth, not irsa, basic auth is not supported on managed OpenSearch
        auth:
            username:
            password:
        url:
            protocol: https
            host: ${OPENSEARCH_HOST}
            # Amazon OpenSearch Service listens on port 443 opposed to the usual port 9200.
            port: 443

    identity:
        auth:
            enabled: true
            type: KEYCLOAK
            # using localhost:18080 -> camunda-keycloak:80
            publicIssuerUrl: http://localhost:18080/auth/realms/camunda-platform  # replace this with a port of your choice when you will do port forwarding

            orchestration:
                secret:
                    existingSecret: identity-secret-for-components
                    existingSecretKey: identity-orchestration-client-token

                redirectUrl: http://localhost:8082  # replace this with a port of your choice when you will do port forwarding

            admin:
                secret:
                    existingSecret: identity-secret-for-components
                    existingSecretKey: identity-admin-client-token

            connectors:
                secret:
                    existingSecret: identity-secret-for-components
                    existingSecretKey: identity-connectors-client-token

            optimize:
                secret:
                    existingSecret: identity-secret-for-components
                    existingSecretKey: identity-optimize-client-token
                redirectUrl: http://localhost:8083  # replace this with a port of your choice when you will do port forwarding

            webModeler:
                secret:
                    existingSecret: identity-secret-for-components
                    existingSecretKey: identity-webmodeler-client-token
                redirectUrl: http://localhost:8084

            console:
                secret:
                    existingSecret: identity-secret-for-components
                    existingSecretKey: identity-console-client-token
                redirectUrl: http://localhost:8085

identityKeycloak:
    enabled: true
    postgresql:
        enabled: false
    externalDatabase:
        # see https://artifacthub.io/packages/helm/bitnami/keycloak
        existingSecret: identity-keycloak-secret   # Name of an existing secret resource containing the database credentials
        existingSecretHostKey: host
        existingSecretPortKey: port
        existingSecretUserKey: user
        existingSecretDatabaseKey: database
        existingSecretPasswordKey: password
    auth:
        existingSecret: identity-secret-for-components
        passwordSecretKey: identity-admin-client-token

identity:
    enabled: true
    contextPath: /managementidentity
    fullURL: http://localhost:8080/managementidentity # replace this with a port of your choice when you will do port forwarding

    firstUser:
        enabled: true
        secret:
            existingSecret: identity-secret-for-components
            existingSecretKey: identity-first-user-password

    externalDatabase:
        enabled: true
        host: ${DB_HOST}
        port: 5432
        username: ${DB_IDENTITY_USERNAME}
        database: ${DB_IDENTITY_NAME}
        existingSecret: identity-postgres-secret
        existingSecretPasswordKey: password

connectors:
    image:
        tag: 8.8-SNAPSHOT # TODO: remove! <8.8>

    # Configure OIDC for connectors
    security:
        authentication:
            oidc:
                secret:
                    existingSecret: identity-secret-for-components
                    existingSecretKey: identity-connectors-client-token

optimize:
    enabled: true
    # OpenSearch prevents migration
    migration:
        enabled: false

orchestration:
    image:
        tag: 8.8-SNAPSHOT # TODO: remove! <8.8>

    security:
        authentication:
            method: oidc
            redirectUrl: http://localhost:18080
            oidc:
                secret:
                    existingSecret: identity-secret-for-components
                    existingSecretKey: identity-orchestration-client-token

console:
    enabled: false # by default, console is not enabled


webModeler:
    enabled: false # by default, webModeler is not enabled

    restapi:
        externalDatabase:
            url: jdbc:aws-wrapper:postgresql://${DB_HOST}:5432/${DB_WEBMODELER_NAME}
            user: ${DB_WEBMODELER_USERNAME}
            secret:
                existingSecret: webmodeler-postgres-secret
                existingSecretKey: password
        env:
            - name: SPRING_DATASOURCE_DRIVER_CLASS_NAME
              value: software.amazon.jdbc.Driver
        mail:
            secret:
                existingSecret: identity-secret-for-components # reference the smtp password
                existingSecretKey: smtp-password
            fromAddress: changeme@example.com   # change this required value

webModelerPostgresql:
    # Will deploy a postgresql datbase for webModeler.
    # If you enable webModeler, you either need to turn it true or use an external database
    enabled: false
    auth:
        existingSecret: identity-secret-for-components
        secretKeys:
            adminPasswordKey: identity-webmodeler-postgres-admin-password
            userPasswordKey: identity-webmodeler-postgres-user-password


elasticsearch:
    enabled: false
