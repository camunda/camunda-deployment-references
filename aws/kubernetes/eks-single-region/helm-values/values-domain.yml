---
global:
    elasticsearch:
        enabled: false
    opensearch:
        enabled: true
        aws:
            enabled: false # we rely on anonymous auth, not irsa, basic auth is not supported on managed OpenSearch
        auth:
            username:
            password:
        url:
            protocol: https
            host: ${OPENSEARCH_HOST}
            # Amazon OpenSearch Service listens on port 443 opposed to the usual port 9200.
            port: 443

    security:
        authentication:
            method: oidc

    ingress:
        enabled: true
        host: ${DOMAIN_NAME}
        tls:
            enabled: true
            secretName: camunda-c8-tls
        annotations:
            kubernetes.io/tls-acme: 'true'
    identity:
        auth:
            enabled: true
            type: KEYCLOAK
            publicIssuerUrl: https://${DOMAIN_NAME}/auth/realms/camunda-platform

            admin:
                secret:
                    existingSecret: identity-secret-for-components
                    existingSecretKey: identity-admin-client-token

            identity:
                redirectUrl: https://${DOMAIN_NAME}/managementidentity

            optimize:
                secret:
                    existingSecret: identity-secret-for-components
                    existingSecretKey: identity-optimize-client-token
                redirectUrl: https://${DOMAIN_NAME}/optimize

            webModeler:
                redirectUrl: https://${DOMAIN_NAME}/modeler

            console:
                secret:
                    existingSecret: identity-secret-for-components
                    existingSecretKey: identity-console-client-token
                redirectUrl: https://${DOMAIN_NAME}/console

identityKeycloak:
    enabled: true
    postgresql:
        enabled: false
    externalDatabase:
        # see https://artifacthub.io/packages/helm/bitnami/keycloak
        existingSecret: identity-keycloak-secret   # Name of an existing secret resource containing the database credentials
        existingSecretHostKey: host
        existingSecretPortKey: port
        existingSecretUserKey: user
        existingSecretDatabaseKey: database
        existingSecretPasswordKey: password
    auth:
        existingSecret: identity-secret-for-components
        passwordSecretKey: identity-admin-client-token

identity:
    enabled: true
    contextPath: /managementidentity

    fullURL: https://${DOMAIN_NAME}/managementidentity

    firstUser:
        enabled: true
        secret:
            existingSecret: identity-secret-for-components
            existingSecretKey: identity-first-user-password

    externalDatabase:
        enabled: true
        host: ${DB_HOST}
        port: 5432
        username: ${DB_IDENTITY_USERNAME}
        database: ${DB_IDENTITY_NAME}
        secret:
            existingSecret: identity-postgres-secret
            existingSecretPasswordKey: password

connectors:

    contextPath: /connectors

    # Configure OIDC for connectors
    security:
        authentication:
            oidc:
                secret:
                    existingSecret: identity-secret-for-components
                    existingSecretKey: identity-connectors-client-token

optimize:
    enabled: true
    contextPath: /optimize

    # OpenSearch prevents migration
    migration:
        enabled: false

orchestration:
    contextPath: /

    # Configure OIDC for orchestration
    security:
        authentication:
            oidc:
                secret:
                    existingSecret: identity-secret-for-components
                    existingSecretKey: identity-orchestration-client-token
                redirectUrl: https://${DOMAIN_NAME}

    ingress:
        grpc:
            enabled: true
            host: zeebe-${DOMAIN_NAME}
            tls:
                enabled: true
                secretName: zeebe-c8-tls-grpc
            annotations:
                kubernetes.io/tls-acme: 'true'

console:
    enabled: false # by default, console is not enabled
    contextPath: /console


webModeler:
    enabled: false # by default, webModeler is not enabled
    contextPath: /modeler

    restapi:
        externalDatabase:
            url: jdbc:aws-wrapper:postgresql://${DB_HOST}:5432/${DB_WEBMODELER_NAME}
            user: ${DB_WEBMODELER_USERNAME}
            secret:
                existingSecret: webmodeler-postgres-secret
                existingSecretKey: password
        env:
            - name: SPRING_DATASOURCE_DRIVER_CLASS_NAME
              value: software.amazon.jdbc.Driver
        mail:
            secret:
                existingSecret: identity-secret-for-components # reference the smtp password
                existingSecretKey: smtp-password
            fromAddress: changeme@example.com   # change this required value

webModelerPostgresql:
    # Will deploy a postgresql datbase for webModeler.
    # If you enable webModeler, you either need to turn it true or use an external database
    enabled: false

elasticsearch:
    enabled: false
