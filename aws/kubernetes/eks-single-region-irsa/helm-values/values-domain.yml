---

global:
    elasticsearch:
        enabled: false
    opensearch:
        enabled: true
        aws:
            enabled: true # enable IRSA auth
        url:
            protocol: https
            host: os.picsou86.camunda.ie
            # host: ${OPENSEARCH_HOST}
            # Amazon OpenSearch Service listens on port 443 opposed to the usual port 9200.
            port: 443

    # TODO: added in 8.8
    security:
        authentication:
            method: oidc

    ingress:
        enabled: true
        host: ${DOMAIN_NAME}
        tls:
            enabled: true
            # TODO: edited to consume self-signed certs
            secretName: aws-pca-p12
        annotations:
            # kubernetes.io/tls-acme: 'true'
            # TODO; added for rencryption
            nginx.ingress.kubernetes.io/backend-protocol: HTTPS
            nginx.ingress.kubernetes.io/ssl-redirect: 'true'

    identity:
        auth:
            publicIssuerUrl: https://${DOMAIN_NAME}/auth/realms/camunda-platform
            zeebe:
                existingSecret:
                    name: identity-secret-for-components
            connectors:
                existingSecret:
                    name: identity-secret-for-components
            operate:
                redirectUrl: https://${DOMAIN_NAME}/operate
                existingSecret:
                    name: identity-secret-for-components
            tasklist:
                redirectUrl: https://${DOMAIN_NAME}/tasklist
                existingSecret:
                    name: identity-secret-for-components
            optimize:
                redirectUrl: https://${DOMAIN_NAME}/optimize
                existingSecret:
                    name: identity-secret-for-components
            webModeler:
                redirectUrl: https://${DOMAIN_NAME}/modeler
            console:
                redirectUrl: https://${DOMAIN_NAME}/console
                existingSecret:
                    name: identity-secret-for-components

identityKeycloak:
    enabled: true
    serviceAccount:
        name: ${CAMUNDA_KEYCLOAK_SERVICE_ACCOUNT_NAME}
        annotations:
            eks.amazonaws.com/role-arn: ${DB_ROLE_KEYCLOAK_ARN}

    postgresql:
        enabled: false
    externalDatabase:
        host: ${DB_HOST}
        user: ${DB_KEYCLOAK_USERNAME}
        port: 5432
        database: ${DB_KEYCLOAK_NAME}

    extraEnvVars:
        - name: KEYCLOAK_EXTRA_ARGS
          value: --db-driver=software.amazon.jdbc.Driver --transaction-xa-enabled=false --log-level=INFO,software.amazon.jdbc:INFO
        - name: KEYCLOAK_JDBC_PARAMS
          value: wrapperPlugins=iam&ssl=true&sslmode=require
        - name: KEYCLOAK_JDBC_DRIVER
          value: aws-wrapper:postgresql

    auth:
        existingSecret: identity-secret-for-components
        usePem: true

    # TODO: added for self-signed certs
    tls:
        enabled: true

        # The secret must have "tls-keystore-password" and "tls-truststore-password" keys for the keystore and truststore respectively.
        ## +  "truststore.jks" +  "keystore.jks"
        existingSecret: aws-pca-p12
        passwordsSecret: aws-pca-p12


webModeler:
    enabled: false # by default, webModeler is not enabled
    contextPath: /modeler

    serviceAccount:
        name: ${CAMUNDA_WEBMODELER_SERVICE_ACCOUNT_NAME}
        annotations:
            eks.amazonaws.com/role-arn: ${DB_ROLE_WEBMODELER_ARN}

    restapi:
        externalDatabase:
            url: jdbc:aws-wrapper:postgresql://${DB_HOST}:5432/${DB_WEBMODELER_NAME}?wrapperPlugins=iam
            user: ${DB_WEBMODELER_USERNAME}
            existingSecret: notusedpasswd   # this fake password reference is needed to let the chart deploy webmodeler
        env:
            - name: SPRING_DATASOURCE_DRIVER_CLASS_NAME
              value: software.amazon.jdbc.Driver
        mail:
            existingSecret:
                name: identity-secret-for-components # reference the smtp password
            fromAddress: changeme@example.com   # change this required value

identity:
    # TODO: in the update, make all enabled: true/false explicit
    enabled: true
    contextPath: /identity
    fullURL: https://${DOMAIN_NAME}/identity

    serviceAccount:
        name: ${CAMUNDA_IDENTITY_SERVICE_ACCOUNT_NAME}
        annotations:
            eks.amazonaws.com/role-arn: ${DB_ROLE_IDENTITY_ARN}

    externalDatabase:
        enabled: true
        host: ${DB_HOST}
        port: 5432
        username: ${DB_IDENTITY_USERNAME}
        database: ${DB_IDENTITY_NAME}

    env:
        - name: SPRING_DATASOURCE_URL
          value: jdbc:aws-wrapper:postgresql://${DB_HOST}:5432/${DB_IDENTITY_NAME}?wrapperPlugins=iam
        - name: SPRING_DATASOURCE_DRIVER_CLASS_NAME
          value: software.amazon.jdbc.Driver
        - name: SPRING_DATASOURCE_USERNAME
          value: ${DB_IDENTITY_USERNAME}

        - name: TRUSTSTORE_PASSWORD
          valueFrom:
              secretKeyRef:
                  name: aws-pca-p12
                  key: tls-truststore-password

        - name: KEYSTORE_PASSWORD
          valueFrom:
              secretKeyRef:
                  name: aws-pca-p12
                  key: tls-keystore-password

        - name: JAVA_TOOL_OPTIONS
          value: >-
              -Djavax.net.ssl.trustStore=/usr/local/core/config/truststore.jks -Djavax.net.ssl.trustStorePassword=$(TRUSTSTORE_PASSWORD)
              -Dserver.ssl.key-store=/usr/local/core/config/keystore.jks -Dserver.ssl.key-store-password=$(KEYSTORE_PASSWORD)

        - name: SSL_CERT_FILE
          value: /usr/local/core/config/ca.crt

    extraVolumeMounts:
        - name: truststore
          mountPath: /usr/local/core/config/truststore.jks
          subPath: truststore.jks

        - name: keystore
          mountPath: /usr/local/core/config/keystore.jks
          subPath: keystore.jks

        - name: ca
          mountPath: /usr/local/core/config/ca.crt
          subPath: ca.crt

    extraVolumes:

        - name: truststore
          secret:
              secretName: aws-pca-p12
              items:
                  - key: truststore.jks
                    path: truststore.jks
              defaultMode: 420

        - name: keystore
          secret:
              secretName: aws-pca-p12
              items:
                  - key: keystore.jks
                    path: keystore.jks
              defaultMode: 420

        - name: ca
          secret:
              secretName: aws-pca-p12
              items:
                  - key: ca.crt
                    path: ca.crt
              defaultMode: 420

connectors:
    enabled: true
    contextPath: /connectors

operate:
    contextPath: /operate

    serviceAccount:
        name: ${CAMUNDA_OPERATE_SERVICE_ACCOUNT_NAME}
        annotations:
            eks.amazonaws.com/role-arn: ${OPENSEARCH_ROLE_ARN}

    env:
        - name: CAMUNDA_OPERATE_ZEEBE_SECURE
          value: 'true'
        - name: CAMUNDA_OPERATE_ZEEBE_CERTIFICATEPATH
          value: /usr/local/core/config/tls.crt
        - name: TRUSTSTORE_PASSWORD
          valueFrom:
              secretKeyRef:
                  name: aws-pca-p12
                  key: tls-truststore-password

        - name: JAVA_TOOL_OPTIONS
          value: -Djavax.net.ssl.trustStore=/usr/local/core/config/truststore.jks -Djavax.net.ssl.trustStorePassword=$(TRUSTSTORE_PASSWORD)
        - name: SSL_CERT_FILE
          value: /usr/local/core/config/ca.crt

    extraVolumeMounts:
        - name: certificate
          mountPath: /usr/local/core/config/tls.crt
          subPath: tls.crt
        - name: key
          mountPath: /usr/local/core/config/tls.key
          subPath: tls.key
        - name: ca
          mountPath: /usr/local/core/config/ca.crt
          subPath: ca.crt
        - name: truststore
          mountPath: /usr/local/core/config/truststore.jks
          subPath: truststore.jks

    extraVolumes:
        - name: certificate
          secret:
              secretName: aws-pca-p12
              items:
                  - key: tls.crt
                    path: tls.crt
              defaultMode: 420

        - name: key
          secret:
              secretName: aws-pca-p12
              items:
                  - key: tls.key
                    path: tls.key
              defaultMode: 420

        - name: truststore
          secret:
              secretName: aws-pca-p12
              items:
                  - key: truststore.jks
                    path: truststore.jks
              defaultMode: 420

        - name: ca
          secret:
              secretName: aws-pca-p12
              items:
                  - key: ca.crt
                    path: ca.crt
              defaultMode: 420

tasklist:
    contextPath: /tasklist

    serviceAccount:
        name: ${CAMUNDA_TASKLIST_SERVICE_ACCOUNT_NAME}
        annotations:
            eks.amazonaws.com/role-arn: ${OPENSEARCH_ROLE_ARN}

    env:
        - name: CAMUNDA_TASKLIST_ZEEBE_SECURE
          value: 'true'
        - name: CAMUNDA_TASKLIST_ZEEBE_CERTIFICATEPATH
          value: /usr/local/tasklist/config/tls.crt
        - name: TRUSTSTORE_PASSWORD
          valueFrom:
              secretKeyRef:
                  name: aws-pca-p12
                  key: tls-truststore-password

        - name: JAVA_TOOL_OPTIONS
          value: -Djavax.net.ssl.trustStore=/usr/local/core/config/truststore.jks -Djavax.net.ssl.trustStorePassword=$(TRUSTSTORE_PASSWORD)
        - name: SSL_CERT_FILE
          value: /usr/local/core/config/ca.crt

    extraVolumeMounts:
        - name: certificate
          mountPath: /usr/local/core/config/tls.crt
          subPath: tls.crt
        - name: key
          mountPath: /usr/local/core/config/tls.key
          subPath: tls.key
        - name: ca
          mountPath: /usr/local/core/config/ca.crt
          subPath: ca.crt
        - name: truststore
          mountPath: /usr/local/core/config/truststore.jks
          subPath: truststore.jks

    extraVolumes:
        - name: certificate
          secret:
              secretName: aws-pca-p12
              items:
                  - key: tls.crt
                    path: tls.crt
              defaultMode: 420

        - name: key
          secret:
              secretName: aws-pca-p12
              items:
                  - key: tls.key
                    path: tls.key
              defaultMode: 420

        - name: truststore
          secret:
              secretName: aws-pca-p12
              items:
                  - key: truststore.jks
                    path: truststore.jks
              defaultMode: 420

        - name: ca
          secret:
              secretName: aws-pca-p12
              items:
                  - key: ca.crt
                    path: ca.crt
              defaultMode: 420

zeebe:
    serviceAccount:
        name: ${CAMUNDA_ZEEBE_SERVICE_ACCOUNT_NAME}
        annotations:
            eks.amazonaws.com/role-arn: ${OPENSEARCH_ROLE_ARN}
    env:
        - name: ZEEBE_BROKER_NETWORK_SECURITY_ENABLED
          value: 'true'
        - name: ZEEBE_BROKER_NETWORK_SECURITY_CERTIFICATECHAINPATH
          value: /usr/local/core/config/tls.crt
        - name: ZEEBE_BROKER_NETWORK_SECURITY_PRIVATEKEYPATH
          value: /usr/local/core/config/tls.key
        - name: TRUSTSTORE_PASSWORD
          valueFrom:
              secretKeyRef:
                  name: aws-pca-p12
                  key: tls-truststore-password

        - name: JAVA_TOOL_OPTIONS
          value: -Djavax.net.ssl.trustStore=/usr/local/core/config/truststore.jks -Djavax.net.ssl.trustStorePassword=$(TRUSTSTORE_PASSWORD)
        - name: SSL_CERT_FILE
          value: /usr/local/core/config/ca.crt

    extraVolumeMounts:
        - name: certificate
          mountPath: /usr/local/core/config/tls.crt
          subPath: tls.crt
        - name: key
          mountPath: /usr/local/core/config/tls.key
          subPath: tls.key
        - name: ca
          mountPath: /usr/local/core/config/ca.crt
          subPath: ca.crt
        - name: truststore
          mountPath: /usr/local/core/config/truststore.jks
          subPath: truststore.jks

    extraVolumes:
        - name: certificate
          secret:
              secretName: aws-pca-p12
              items:
                  - key: tls.crt
                    path: tls.crt
              defaultMode: 420

        - name: key
          secret:
              secretName: aws-pca-p12
              items:
                  - key: tls.key
                    path: tls.key
              defaultMode: 420

        - name: truststore
          secret:
              secretName: aws-pca-p12
              items:
                  - key: truststore.jks
                    path: truststore.jks
              defaultMode: 420

        - name: ca
          secret:
              secretName: aws-pca-p12
              items:
                  - key: ca.crt
                    path: ca.crt
              defaultMode: 420

zeebeGateway:
    ingress:
        grpc:
            enabled: true
            host: zeebe.${DOMAIN_NAME}
            tls:
                enabled: true
                secretName: zeebe-c8-tls-grpc
            annotations:
                kubernetes.io/tls-acme: 'true'
    contextPath: /zeebe

    env:
        - name: ZEEBE_GATEWAY_SECURITY_ENABLED
          value: 'true'
        - name: ZEEBE_GATEWAY_SECURITY_CERTIFICATECHAINPATH
          value: /usr/local/core/config/tls.crt
        - name: ZEEBE_GATEWAY_SECURITY_PRIVATEKEYPATH
          value: /usr/local/core/config/tls.key
        - name: ZEEBE_GATEWAY_CLUSTER_SECURITY_ENABLED
          value: 'true'
        - name: ZEEBE_GATEWAY_CLUSTER_SECURITY_CERTIFICATECHAINPATH
          value: /usr/local/core/config/tls.crt
        - name: ZEEBE_GATEWAY_CLUSTER_SECURITY_PRIVATEKEYPATH
          value: /usr/local/core/config/tls.key
        - name: TRUSTSTORE_PASSWORD
          valueFrom:
              secretKeyRef:
                  name: aws-pca-p12
                  key: tls-truststore-password

        - name: JAVA_TOOL_OPTIONS
          value: -Djavax.net.ssl.trustStore=/usr/local/core/config/truststore.jks -Djavax.net.ssl.trustStorePassword=$(TRUSTSTORE_PASSWORD)
        - name: SSL_CERT_FILE
          value: /usr/local/core/config/ca.crt

    extraVolumeMounts:
        - name: certificate
          mountPath: /usr/local/core/config/tls.crt
          subPath: tls.crt
        - name: key
          mountPath: /usr/local/core/config/tls.key
          subPath: tls.key
        - name: ca
          mountPath: /usr/local/core/config/ca.crt
          subPath: ca.crt
        - name: truststore
          mountPath: /usr/local/core/config/truststore.jks
          subPath: truststore.jks

    extraVolumes:
        - name: certificate
          secret:
              secretName: aws-pca-p12
              items:
                  - key: tls.crt
                    path: tls.crt
              defaultMode: 420

        - name: key
          secret:
              secretName: aws-pca-p12
              items:
                  - key: tls.key
                    path: tls.key
              defaultMode: 420

        - name: truststore
          secret:
              secretName: aws-pca-p12
              items:
                  - key: truststore.jks
                    path: truststore.jks
              defaultMode: 420

        - name: ca
          secret:
              secretName: aws-pca-p12
              items:
                  - key: ca.crt
                    path: ca.crt
              defaultMode: 420

optimize:
    enabled: true
    contextPath: /optimize

    serviceAccount:
        name: ${CAMUNDA_OPTIMIZE_SERVICE_ACCOUNT_NAME}
        annotations:
            eks.amazonaws.com/role-arn: ${OPENSEARCH_ROLE_ARN}

    # OpenSearch prevents migration
    migration:
        enabled: false
    env:
        - name: TRUSTSTORE_PASSWORD
          valueFrom:
              secretKeyRef:
                  name: aws-pca-p12
                  key: tls-truststore-password

        - name: JAVA_TOOL_OPTIONS
          value: -Djavax.net.ssl.trustStore=/usr/local/core/config/truststore.jks -Djavax.net.ssl.trustStorePassword=$(TRUSTSTORE_PASSWORD)
        - name: SSL_CERT_FILE
          value: /usr/local/core/config/ca.crt

    extraVolumeMounts:
        - name: certificate
          mountPath: /usr/local/core/config/tls.crt
          subPath: tls.crt
        - name: key
          mountPath: /usr/local/core/config/tls.key
          subPath: tls.key
        - name: ca
          mountPath: /usr/local/core/config/ca.crt
          subPath: ca.crt
        - name: truststore
          mountPath: /usr/local/core/config/truststore.jks
          subPath: truststore.jks

    extraVolumes:
        - name: certificate
          secret:
              secretName: aws-pca-p12
              items:
                  - key: tls.crt
                    path: tls.crt
              defaultMode: 420

        - name: key
          secret:
              secretName: aws-pca-p12
              items:
                  - key: tls.key
                    path: tls.key
              defaultMode: 420

        - name: truststore
          secret:
              secretName: aws-pca-p12
              items:
                  - key: truststore.jks
                    path: truststore.jks
              defaultMode: 420

        - name: ca
          secret:
              secretName: aws-pca-p12
              items:
                  - key: ca.crt
                    path: ca.crt
              defaultMode: 420

console:
    enabled: false # by default, console is not enabled
    contextPath: /

elasticsearch:
    enabled: false
