---
global:
    elasticsearch:
        enabled: false
    opensearch:
        enabled: true
        aws:
            enabled: true # enable IRSA auth
        url:
            protocol: https
            host: ${OPENSEARCH_HOST}
            # Amazon OpenSearch Service listens on port 443 opposed to the usual port 9200.
            port: 443

    security:
        authentication:
            method: oidc

    identity:
        auth:
            enabled: true
            type: KEYCLOAK

            issuerBackendUrl: http://${CAMUNDA_RELEASE_NAME}-keycloak:8080/auth/realms/camunda-platform
            issuer: http://${CAMUNDA_RELEASE_NAME}-keycloak:8080/auth/realms/camunda-platform
            # using localhost:18080 -> camunda-keycloak:8080
            publicIssuerUrl: http://localhost:18080/auth/realms/camunda-platform  # replace this with a port of your choice when you will do port forwarding

            admin:
                secret:
                    existingSecret: identity-secret-for-components
                    existingSecretKey: identity-admin-client-token

            identity:
                redirectUrl: http://localhost:8085  # replace this with a port of your choice when you will do port forwarding

            optimize:
                secret:
                    existingSecret: identity-secret-for-components
                    existingSecretKey: identity-optimize-client-token
                redirectUrl: http://localhost:8083  # replace this with a port of your choice when you will do port forwarding

            webModeler:
                redirectUrl: http://localhost:8070

            console:
                secret:
                    existingSecret: identity-secret-for-components
                    existingSecretKey: identity-console-client-token
                redirectUrl: http://localhost:8087

identityKeycloak:
    enabled: true
    serviceAccount:
        name: ${CAMUNDA_KEYCLOAK_SERVICE_ACCOUNT_NAME}
        annotations:
            eks.amazonaws.com/role-arn: ${DB_ROLE_KEYCLOAK_ARN}

    postgresql:
        enabled: false
    externalDatabase:
        host: ${DB_HOST}
        user: ${DB_KEYCLOAK_USERNAME}
        port: 5432
        database: ${DB_KEYCLOAK_NAME}

    extraEnvVars:
        - name: KEYCLOAK_EXTRA_ARGS
          value: --db-driver=software.amazon.jdbc.Driver --transaction-xa-enabled=false --log-level=INFO,software.amazon.jdbc:INFO
        - name: KEYCLOAK_JDBC_PARAMS
          value: wrapperPlugins=iam&ssl=true&sslmode=require
        - name: KEYCLOAK_JDBC_DRIVER
          value: aws-wrapper:postgresql

        # This is required to ensure proper issuer of JWT tokens
        - name: KC_HOSTNAME
          value: ${CAMUNDA_RELEASE_NAME}-keycloak

    # match the internal keycloak port to the external port for JWT Tokens issuer
    ports:
        http: 8080
    service:
        ports:
            http: 8080

    auth:
        existingSecret: identity-secret-for-components
        passwordSecretKey: identity-admin-client-token

identity:
    enabled: true
    contextPath: /managementidentity
    serviceAccount:
        name: ${CAMUNDA_IDENTITY_SERVICE_ACCOUNT_NAME}
        annotations:
            eks.amazonaws.com/role-arn: ${DB_ROLE_IDENTITY_ARN}

    fullURL: http://localhost:8080/managementidentity # replace this with a port of your choice when you will do port forwarding

    firstUser:
        enabled: true
        username: admin
        email: admin@camunda.local
        firstName: Admin
        lastName: User
        secret:
            existingSecret: identity-secret-for-components
            existingSecretKey: identity-first-user-password

    externalDatabase:
        enabled: true
        host: ${DB_HOST}
        port: 5432
        username: ${DB_IDENTITY_USERNAME}
        database: ${DB_IDENTITY_NAME}

    env:
        - name: SPRING_DATASOURCE_URL
          value: jdbc:aws-wrapper:postgresql://${DB_HOST}:5432/${DB_IDENTITY_NAME}?wrapperPlugins=iam
        - name: SPRING_DATASOURCE_DRIVER_CLASS_NAME
          value: software.amazon.jdbc.Driver
        - name: SPRING_DATASOURCE_USERNAME
          value: ${DB_IDENTITY_USERNAME}

connectors:
    # Configure OIDC for connectors
    security:
        authentication:
            oidc:
                secret:
                    existingSecret: identity-secret-for-components
                    existingSecretKey: identity-connectors-client-token

optimize:
    enabled: true
    serviceAccount:
        name: ${CAMUNDA_OPTIMIZE_SERVICE_ACCOUNT_NAME}
        annotations:
            eks.amazonaws.com/role-arn: ${OPENSEARCH_ROLE_ARN}

    # OpenSearch prevents migration
    migration:
        enabled: false

orchestration:
    serviceAccount:
        name: ${CAMUNDA_ZEEBE_SERVICE_ACCOUNT_NAME}
        annotations:
            eks.amazonaws.com/role-arn: ${OPENSEARCH_ROLE_ARN}

    # Configure OIDC for orchestration
    security:
        authentication:
            oidc:
                secret:
                    existingSecret: identity-secret-for-components
                    existingSecretKey: identity-orchestration-client-token
                redirectUrl: http://localhost:8080

            mappingRules:
                - mappingRuleID: admin-user-mapping-rule
                  claimName: preferred_username
                  claimValue: admin

    env:
        - name: CAMUNDA_SECURITY_INITIALIZATION_MAPPINGRULES_0_MAPPINGRULEID
          value: admin-user-mapping-rule
        - name: CAMUNDA_SECURITY_INITIALIZATION_MAPPINGRULES_0_CLAIMNAME
          value: preferred_username
        - name: CAMUNDA_SECURITY_INITIALIZATION_MAPPINGRULES_0_CLAIMVALUE
          value: admin
        - name: CAMUNDA_SECURITY_INITIALIZATION_MAPPINGRULES_2_MAPPINGRULEID
          value: connectors-client-mapping-rule
        - name: CAMUNDA_SECURITY_INITIALIZATION_MAPPINGRULES_2_CLAIMNAME
          value: client_id
        - name: CAMUNDA_SECURITY_INITIALIZATION_MAPPINGRULES_2_CLAIMVALUE
          value: connectors
        - name: CAMUNDA_SECURITY_INITIALIZATION_DEFAULTROLES_ADMIN_MAPPINGRULES_0
          value: admin-user-mapping-rule
        - name: CAMUNDA_SECURITY_INITIALIZATION_DEFAULTROLES_ADMIN_MAPPINGRULES_2
          value: connectors-client-mapping-rule


console:
    enabled: false # by default, console is not enabled

webModeler:
    enabled: false # by default, webModeler is not enabled

    serviceAccount:
        name: ${CAMUNDA_WEBMODELER_SERVICE_ACCOUNT_NAME}
        annotations:
            eks.amazonaws.com/role-arn: ${DB_ROLE_WEBMODELER_ARN}

    restapi:
        externalDatabase:
            url: jdbc:aws-wrapper:postgresql://${DB_HOST}:5432/${DB_WEBMODELER_NAME}?wrapperPlugins=iam
            user: ${DB_WEBMODELER_USERNAME}
            secret:
                existingSecret: identity-secret-for-components # this fake password reference is needed to let the chart deploy webmodeler
                existingSecretPasswordKey: password
        env:
            - name: SPRING_DATASOURCE_DRIVER_CLASS_NAME
              value: software.amazon.jdbc.Driver
        mail:
            secret:
                existingSecret: identity-secret-for-components # reference the smtp password
                existingSecretKey: smtp-password
            fromAddress: changeme@example.com   # change this required value

webModelerPostgresql:
    # Will deploy a postgresql datbase for webModeler.
    # If you enable webModeler, you either need to turn it true or use an external database
    enabled: false

elasticsearch:
    enabled: false
