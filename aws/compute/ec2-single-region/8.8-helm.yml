---
# Source: camunda-platform/charts/elasticsearch/templates/master/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: camunda-elasticsearch-master
  namespace: "default"
  labels:
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/version: 8.17.4
    helm.sh/chart: elasticsearch-21.4.9
    app.kubernetes.io/component: master
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: camunda
      app.kubernetes.io/name: elasticsearch
      app.kubernetes.io/component: master
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 9200
        - port: 9300
---
# Source: camunda-platform/charts/elasticsearch/templates/master/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: camunda-elasticsearch-master
  namespace: "default"
  labels:
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/version: 8.17.4
    helm.sh/chart: elasticsearch-21.4.9
    app.kubernetes.io/component: master
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: camunda
      app.kubernetes.io/name: elasticsearch
      app.kubernetes.io/component: master
---
# Source: camunda-platform/charts/elasticsearch/templates/master/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: camunda-elasticsearch-master
  namespace: "default"
  labels:
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/version: 8.17.4
    helm.sh/chart: elasticsearch-21.4.9
    app.kubernetes.io/component: master
automountServiceAccountToken: false
---
# Source: camunda-platform/templates/connectors/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: camunda-connectors
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-13.0.0-alpha3
    app.kubernetes.io/component: connectors
    app.kubernetes.io/version: "8.8.0-alpha3"
automountServiceAccountToken: false
---
# Source: camunda-platform/templates/core/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: camunda-core
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-13.0.0-alpha3
    app.kubernetes.io/component: core
    app.kubernetes.io/version: "8.8.0-alpha3"
automountServiceAccountToken: false
---
# Source: camunda-platform/templates/camunda/secret-camunda-license.yaml
apiVersion: v1
kind: Secret
metadata:
  name: camunda-camunda-platform-license
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-13.0.0-alpha3
  annotations:
    {}
type: Opaque
data:
  CAMUNDA_LICENSE_KEY: ''
---
# Source: camunda-platform/charts/elasticsearch/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: camunda-elasticsearch
  namespace: "default"
  labels:
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/version: 8.17.4
    helm.sh/chart: elasticsearch-21.4.9
data:
  my_elasticsearch.yml: |-
    # Disable deprecation warnings - https://github.com/camunda/camunda/issues/26285
    logger.org.elasticsearch.deprecation: "OFF"
---
# Source: camunda-platform/templates/camunda/configmap-documentstore.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: camunda-camunda-platform-documentstore-env-vars
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-13.0.0-alpha3
  annotations:
    {}
data:
  DOCUMENT_DEFAULT_STORE_ID: "inmemory"
  DOCUMENT_STORE_INMEMORY_CLASS: "io.camunda.document.store.inmemory.InMemoryDocumentStoreProvider"
---
# Source: camunda-platform/templates/camunda/configmap-release.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: camunda-camunda-platform-release
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-13.0.0-alpha3
  annotations:
    {}
data:
  info: |-
    - name: camunda
      namespace: default
      version: 13.0.0-alpha3
      tags:
      - dev
      custom-properties: []
      components:
      
      - name: Connectors
        id: connectors
        version: 8.8.0-alpha3
        url: http://localhost:8086
        readiness: http://camunda-connectors.default:8080/actuator/health/readiness
        metrics: http://camunda-connectors.default:8080/actuator/prometheus
      - name: Operate
        id: operate
        version: 8.8.0-alpha3
        url: http://localhost:8088/operate
        readiness: http://camunda-core.default:9600/actuator/health/readiness
        metrics: http://camunda-core.default:9600/actuator/prometheus
      - name: Tasklist
        id: tasklist
        version: 8.8.0-alpha3
        url: http://localhost:8088/tasklist
        readiness: http://camunda-core.default:9600/actuator/health/readiness
        metrics: http://camunda-core.default:9600/actuator/prometheus
      - name: Core Identity
        id: coreIdentity
        version: 8.8.0-alpha3
        url: http://localhost:8088/identity
        readiness: http://camunda-core.default:9600/actuator/health/readiness
        metrics: http://camunda-core.default:9600/actuator/prometheus
      - name: Zeebe Gateway
        id: zeebeGateway
        version: 8.8.0-alpha3
        urls:
          grpc: http://localhost:26500
          http: http://localhost:8088
        readiness: http://camunda-core.default:9600/actuator/health/readiness
        metrics: http://camunda-core.default:9600/actuator/prometheus
---
# Source: camunda-platform/templates/connectors/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: camunda-connectors-configuration
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-13.0.0-alpha3
    app.kubernetes.io/component: connectors
    app.kubernetes.io/version: "8.8.0-alpha3"
data:
  application.yml: |
    server:
      port: 8080

    management:
      endpoints:
        web:
          exposure:
            include: metrics,health,prometheus
      endpoint:
        health:
          show-details: always
          show-components: always
          group:
            readiness:
              include:
              - processDefinitionImport
              - zeebeClient
      context-path: /actuator

    camunda:
      client:
        rest-address: http://camunda-core:8080
        grpc-address: http://camunda-core:26500
        worker:
          defaults:
            max-jobs-active: 32
            stream-enabled: true
        mode: basic
        auth:
          username: "demo"
          password: "demo"
      connector:
        headless:
          service-url: "camunda-connectors-headless"
    logging:
      level:
        io.camunda.connector: ERROR
---
# Source: camunda-platform/templates/core/configmap.yaml
kind: ConfigMap
metadata:
  name: camunda-core-configuration
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-13.0.0-alpha3
    app.kubernetes.io/component: core
    app.kubernetes.io/version: "8.8.0-alpha3"
apiVersion: v1
data:
  startup.sh: |
    # The Node ID depends on the Pod name so it cannot be templated in the StatefulSet level.
    export ZEEBE_BROKER_CLUSTER_NODEID="${ZEEBE_BROKER_CLUSTER_NODEID:-$[${K8S_NAME##*-} * 1 + 0]}"
    echo "export ZEEBE_BROKER_CLUSTER_NODEID=${ZEEBE_BROKER_CLUSTER_NODEID}"

    exec /usr/local/camunda/bin/camunda
  application.yaml: |
    spring:
      servlet:
        multipart:
          max-file-size: "10MB"
          max-request-size: "10MB"
      profiles:
        active: "identity,operate,tasklist,broker,consolidated-auth"

    management:
      server:
        port: 9600

    server:
      forward-headers-strategy: none
      address: 0.0.0.0
      port: 8080
      servlet:

    zeebe:
      host: 0.0.0.0
      log:
        level: "info"

      broker:
        # zeebe.broker.gateway
        gateway:
          enable: true
          network:
            host: 0.0.0.0
            port: 26500

        # zeebe.broker.network
        network:
          advertisedHost: "${K8S_NAME}.${K8S_SERVICE_NAME}"
          host: 0.0.0.0
          commandApi:
            port: 26501
          internalApi:
            port: 26502

        # zeebe.broker.cluster
        cluster:
          # The value of "nodeId" is set via the "ZEEBE_BROKER_CLUSTER_NODEID" env var.
          # As it depends on the Pod name, which cannot be templated at the installation time.
          # nodeId:
          initialContactPoints:
            - camunda-zeebe-0.${K8S_SERVICE_NAME}:26502
            - camunda-zeebe-1.${K8S_SERVICE_NAME}:26502
            - camunda-zeebe-2.${K8S_SERVICE_NAME}:26502
          clusterSize: "3"
          replicationFactor: "3"
          partitionsCount: "3"
          clusterName: camunda-zeebe

        # zeebe.broker.data
        data:
          snapshotPeriod: 5m
          freeSpace:
            processing: 2GB
            replication: 3GB

        # zeebe.broker.threads
        threads:
          cpuThreadCount: "3"
          ioThreadCount: "3"

        # zeebe.broker.exporters
        exporters:
          elasticsearch:
            className: "io.camunda.zeebe.exporter.ElasticsearchExporter"
            args:
              url: "http://camunda-elasticsearch:9200"
              index:
                prefix: "zeebe-record"
          CamundaExporter:
            className: "io.camunda.exporter.CamundaExporter"
            args:
              connect:
                type: elasticsearch
                url: "http://camunda-elasticsearch:9200"
              history:
                elsRolloverDateFormat: "date"
                rolloverInterval: "1d"
                rolloverBatchSize: 100
                waitPeriodBeforeArchiving: "1h"
                delayBetweenRuns: 2000
                maxDelayBetweenRuns: 60000
              createSchema: true

    camunda:
      persistent:
        sessions:
          enabled: true

      rest:
        query:
          enabled: true

      security:
        authentication:
          method: "basic"
          unprotectedApi: false
        authorizations:
          enabled: true
        initialization:
          users:
            - username: "demo"
              password: "demo"
              name: "Demo User"
              email: "demo@demo.com"
        multiTenancy:
            enabled: false

      #
      # Camunda Database Configuration.
      #
      database:
        type: elasticsearch
        # Cluster name
        clusterName: elasticsearch
        # Elasticsearch full url
        url: "http://camunda-elasticsearch:9200"

      #
      # Camunda Operate Configuration.
      #
      operate:
        persistentSessionsEnabled: true

        # ELS instance to store Operate data
        elasticsearch:
          # Operate index prefix.
          # Cluster name
          clusterName: elasticsearch
          # Host
          host: camunda-elasticsearch
          # Transport port
          port: 9200
          # Elasticsearch full url
          url: "http://camunda-elasticsearch:9200"
        # ELS instance to export Zeebe data to
        zeebeElasticsearch:
          # Cluster name
          clusterName: elasticsearch
          # Host
          host: camunda-elasticsearch
          # Transport port
          port: 9200
          # Index prefix, configured in Zeebe Elasticsearch exporter
          prefix: "zeebe-record"
          # Elasticsearch full url
          url: "http://camunda-elasticsearch:9200"
        # Zeebe instance
        zeebe:
          # Gateway address
          gatewayAddress: "camunda-core:26500"

      #
      # Camunda Tasklist Configuration.
      #
      tasklist:

        # Set Tasklist username and password.
        # If user with <username> does not exists it will be created.
        # Default: demo/demo
        #username:
        #password:
        # ELS instance to store Tasklist data
        elasticsearch:
          # Tasklist index prefix.
          # Cluster name
          clusterName: elasticsearch
          # Host
          host: camunda-elasticsearch
          # Transport port
          port: 9200
          # Elasticsearch full url
          url: "http://camunda-elasticsearch:9200"
        # ELS instance to export Zeebe data to
        zeebeElasticsearch:
          # Cluster name
          clusterName: elasticsearch
          # Host
          host: camunda-elasticsearch
          # Transport port
          port: 9200
          # Index prefix, configured in Zeebe Elasticsearch exporter
          prefix: "zeebe-record"
          # Elasticsearch full url
          url: "http://camunda-elasticsearch:9200"
        # Zeebe instance
        zeebe:
          # Gateway address
          gatewayAddress: camunda-core:26500
          restAddress: "http://camunda-core:8080"

  log4j2.xml: |
---
# Source: camunda-platform/charts/elasticsearch/templates/master/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: camunda-elasticsearch-master-hl
  namespace: "default"
  labels:
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/version: 8.17.4
    helm.sh/chart: elasticsearch-21.4.9
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: tcp-rest-api
      port: 9200
      targetPort: rest-api
    - name: tcp-transport
      port: 9300
      targetPort: transport
  selector:
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/component: master
---
# Source: camunda-platform/charts/elasticsearch/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: camunda-elasticsearch
  namespace: "default"
  labels:
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/version: 8.17.4
    helm.sh/chart: elasticsearch-21.4.9
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-rest-api
      port: 9200
      targetPort: rest-api
      nodePort: null
    - name: tcp-transport
      port: 9300
      nodePort: null
  selector:
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/component: master
---
# Source: camunda-platform/templates/connectors/service-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: camunda-connectors-headless
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-13.0.0-alpha3
    app.kubernetes.io/component: connectors
    app.kubernetes.io/version: "8.8.0-alpha3"
  annotations:
spec:
  clusterIP: None
  type: ClusterIP
  ports:
    - name: http
      port: 8080
      targetPort: 8080
      protocol: TCP
  selector:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    app.kubernetes.io/component: connectors
---
# Source: camunda-platform/templates/connectors/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: camunda-connectors
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-13.0.0-alpha3
    app.kubernetes.io/component: connectors
    app.kubernetes.io/version: "8.8.0-alpha3"
  annotations:
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8080
      targetPort: 8080
      protocol: TCP
  selector:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    app.kubernetes.io/component: connectors
---
# Source: camunda-platform/templates/core/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: camunda-core
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-13.0.0-alpha3
    app.kubernetes.io/component: core
    app.kubernetes.io/version: "8.8.0-alpha3"
  annotations:
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http
    - port: 26502
      protocol: TCP
      name: internal
    - port: 26501
      protocol: TCP
      name: command
    - port: 9600
      protocol: TCP
      name: server
    - port: 26500
      protocol: TCP
      name: gateway
  selector:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    app.kubernetes.io/component: core
---
# Source: camunda-platform/templates/connectors/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: camunda-connectors
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-13.0.0-alpha3
    app.kubernetes.io/component: connectors
    app.kubernetes.io/version: "8.8.0-alpha3"
  annotations:
    {}
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: camunda-platform
      app.kubernetes.io/name: camunda-platform
      app.kubernetes.io/instance: camunda
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: camunda-platform
      app.kubernetes.io/component: connectors
  template:
    metadata:
      labels:
        app: camunda-platform
        app.kubernetes.io/name: camunda-platform
        app.kubernetes.io/instance: camunda
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: camunda-platform
        helm.sh/chart: camunda-platform-13.0.0-alpha3
        app.kubernetes.io/component: connectors
        app.kubernetes.io/version: "8.8.0-alpha3"
      annotations:
        checksum/config: 9e551edbe20ceef020f9ca7bb04fc23768120c18d4decc5bbfd2b42e94e8a24e
    spec:
      imagePullSecrets:
        []
      initContainers:
        []
      containers:
        - name: connectors
          image: camunda/connectors-bundle:8.8.0-alpha3
          imagePullPolicy: Always
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
          env:
            - name: CAMUNDA_LICENSE_KEY
              valueFrom:
                secretKeyRef:
                  name: camunda-camunda-platform-license
                  key: CAMUNDA_LICENSE_KEY
          envFrom:
            - configMapRef:
                name: camunda-camunda-platform-documentstore-env-vars
          resources:
            limits:
              cpu: 2
              memory: 2Gi
            requests:
              cpu: 1
              memory: 1Gi
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: http
            initialDelaySeconds: 30
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 5
            timeoutSeconds: 1
          volumeMounts:
            - mountPath: /tmp
              name: tmp
            - name: config
              mountPath: /config/application.yml
              subPath: application.yml
      volumes:
        - name: tmp
          emptyDir: {}
        - name: config
          configMap:
            name: camunda-connectors-configuration
      serviceAccountName: camunda-connectors
      securityContext:
        fsGroup: 1001
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
---
# Source: camunda-platform/charts/elasticsearch/templates/master/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: camunda-elasticsearch-master
  namespace: "default"
  labels:
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/version: 8.17.4
    helm.sh/chart: elasticsearch-21.4.9
    app.kubernetes.io/component: master
    ## Istio Labels: https://istio.io/docs/ops/deployment/requirements/
    app: master
spec:
  replicas: 3
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app.kubernetes.io/instance: camunda
      app.kubernetes.io/name: elasticsearch
      app.kubernetes.io/component: master
  serviceName: camunda-elasticsearch-master-hl
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: camunda
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: elasticsearch
        app.kubernetes.io/version: 8.17.4
        helm.sh/chart: elasticsearch-21.4.9
        app.kubernetes.io/component: master
        ## Istio Labels: https://istio.io/docs/ops/deployment/requirements/
        app: master
      annotations:
    spec:
      serviceAccountName: camunda-elasticsearch-master
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app.kubernetes.io/instance: camunda
                  app.kubernetes.io/name: elasticsearch
                  app.kubernetes.io/component: master
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        ## Image that performs the sysctl operation to modify Kernel settings (needed sometimes to avoid boot errors)
        - name: sysctl
          image: docker.io/bitnami/os-shell:12-debian-12-r40
          imagePullPolicy: "IfNotPresent"
          command:
            - /bin/bash
            - -ec
            - |
              CURRENT=`sysctl -n vm.max_map_count`;
              DESIRED="262144";
              if [ "$DESIRED" -gt "$CURRENT" ]; then
                  sysctl -w vm.max_map_count=262144;
              fi;
              CURRENT=`sysctl -n fs.file-max`;
              DESIRED="65536";
              if [ "$DESIRED" -gt "$CURRENT" ]; then
                  sysctl -w fs.file-max=65536;
              fi;
          securityContext:
            privileged: true
            runAsUser: 0
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 2Gi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
        - name: copy-default-plugins
          image: docker.io/bitnami/elasticsearch:8.17.4
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          resources:
            limits:
              cpu: 2
              memory: 2Gi
            requests:
              cpu: 1
              memory: 2Gi
          command:
            - /bin/bash
          args:
            - -ec
            - |
              #!/bin/bash

              . /opt/bitnami/scripts/libfs.sh
              . /opt/bitnami/scripts/elasticsearch-env.sh

              if ! is_dir_empty "$DB_DEFAULT_PLUGINS_DIR"; then
                  cp -nr "$DB_DEFAULT_PLUGINS_DIR"/* /plugins
              fi
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /plugins
              subPath: app-plugins-dir
      containers:
        - name: elasticsearch
          image: docker.io/bitnami/elasticsearch:8.17.4
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: ELASTICSEARCH_IS_DEDICATED_NODE
              value: "no"
            - name: ELASTICSEARCH_NODE_ROLES
              value: "master"
            - name: ELASTICSEARCH_TRANSPORT_PORT_NUMBER
              value: "9300"
            - name: ELASTICSEARCH_HTTP_PORT_NUMBER
              value: "9200"
            - name: ELASTICSEARCH_CLUSTER_NAME
              value: "elastic"
            
            - name: ELASTICSEARCH_CLUSTER_HOSTS
              value: "camunda-elasticsearch-master-hl.default.svc.cluster.local,"
            - name: ELASTICSEARCH_TOTAL_NODES
              value: "3"
            - name: ELASTICSEARCH_CLUSTER_MASTER_HOSTS
              value: camunda-elasticsearch-master-0 camunda-elasticsearch-master-1 camunda-elasticsearch-master-2 
            - name: ELASTICSEARCH_MINIMUM_MASTER_NODES
              value: "2"
            - name: ELASTICSEARCH_ADVERTISED_HOSTNAME
              value: "$(MY_POD_NAME).camunda-elasticsearch-master-hl.default.svc.cluster.local"
            - name: ELASTICSEARCH_HEAP_SIZE
              value: "1024m"
            - name: ELASTICSEARCH_ENABLE_REST_TLS
              value: "false"
          ports:
            - name: rest-api
              containerPort: 9200
            - name: transport
              containerPort: 9300
          livenessProbe:
            failureThreshold: 5
            initialDelaySeconds: 180
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: rest-api
          readinessProbe:
            failureThreshold: 5
            initialDelaySeconds: 90
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /opt/bitnami/scripts/elasticsearch/healthcheck.sh
          resources:
            limits:
              cpu: 2
              memory: 2Gi
            requests:
              cpu: 1
              memory: 2Gi
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/elasticsearch/config
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/elasticsearch/tmp
              subPath: app-tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/elasticsearch/logs
              subPath: app-logs-dir
            - name: empty-dir
              mountPath: /opt/bitnami/elasticsearch/plugins
              subPath: app-plugins-dir
            - name: empty-dir
              mountPath: /bitnami/elasticsearch
              subPath: app-volume-dir
            - name: data
              mountPath: /bitnami/elasticsearch/data
            - mountPath: /opt/bitnami/elasticsearch/config/my_elasticsearch.yml
              name: config
              subPath: my_elasticsearch.yml
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: config
          configMap:
            name: camunda-elasticsearch
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: "data"
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "64Gi"
---
# Source: camunda-platform/templates/core/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: camunda-zeebe
  labels:
    app: camunda-platform
    app.kubernetes.io/name: camunda-platform
    app.kubernetes.io/instance: camunda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: camunda-platform
    helm.sh/chart: camunda-platform-13.0.0-alpha3
    app.kubernetes.io/component: core
    app.kubernetes.io/version: "8.8.0-alpha3"
  annotations:
spec:
  replicas: 3
  selector:
    matchLabels:
      app: camunda-platform
      app.kubernetes.io/name: camunda-platform
      app.kubernetes.io/instance: camunda
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: camunda-platform
      app.kubernetes.io/component: core
  serviceName: camunda-core
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        app: camunda-platform
        app.kubernetes.io/name: camunda-platform
        app.kubernetes.io/instance: camunda
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: camunda-platform
        helm.sh/chart: camunda-platform-13.0.0-alpha3
        app.kubernetes.io/component: core
        app.kubernetes.io/version: "8.8.0-alpha3"
      annotations:
        checksum/config: 38c781f17fa53b822760a68d00a9124e18baf8324359a4581a6dd69f6f8fa630
    spec:
      imagePullSecrets:
        []
      initContainers:
        []
      containers:
        - name: core
          image: camunda/camunda:8.8.0-alpha3
          imagePullPolicy: Always
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          command: ["bash", "/usr/local/bin/startup.sh"]
          env:
            - name: CAMUNDA_LICENSE_KEY
              valueFrom:
                secretKeyRef:
                  name: camunda-camunda-platform-license
                  key: CAMUNDA_LICENSE_KEY
            - name: LC_ALL
              value: C.UTF-8
            - name: K8S_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: K8S_SERVICE_NAME
              value: camunda-core
            - name: K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: JAVA_TOOL_OPTIONS
              value: "-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/usr/local/camunda/data -XX:ErrorFile=/usr/local/camunda/data/zeebe_error%p.log -XX:+ExitOnOutOfMemoryError"
            - name: K8S_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          envFrom:
            - configMapRef:
                name: camunda-camunda-platform-documentstore-env-vars
          ports:
            - containerPort: 8080
              name: http
            - containerPort: 26501
              name: command
            - containerPort: 26502
              name: internal
            - containerPort: 9600
              name: server
            - containerPort: 26500
              name: gateway
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              scheme: HTTP
              port: 9600
            initialDelaySeconds: 30
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 5
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 2000m
              memory: 3000Mi
            requests:
              cpu: 1000m
              memory: 1500Mi
          volumeMounts:
            - name: config
              mountPath: /usr/local/bin/startup.sh
              subPath: startup.sh
            - name: data
              mountPath: /usr/local/camunda/data
            - name: exporters
              mountPath: /exporters
            - mountPath: /tmp
              name: tmp
            - name: config
              mountPath: /usr/local/camunda/config/application.yaml
              subPath: application.yaml
      volumes:
        - name: config
          configMap:
            name: camunda-core-configuration
            defaultMode: 492
        - name: exporters
          emptyDir: {}
        - name: tmp
          emptyDir: {}
      serviceAccountName: camunda-core
      securityContext:
        fsGroup: 1001
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
# yamllint disable
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/component
                operator: In
                values:
                - core
            topologyKey: kubernetes.io/hostname
# yamllint enable
  volumeClaimTemplates:
    - metadata:
        name: data
        annotations:
          {}
      spec:
        accessModes: [ReadWriteOnce]
        resources:
          requests:
            storage: "32Gi"
